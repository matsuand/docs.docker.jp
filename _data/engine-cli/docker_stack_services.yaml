command: docker stack services
short: Stack 内のサービスを一覧表示します。
long: |-
  指定された Stack の一部として起動しているサービスを一覧表示します。

  > **メモ**
  >
  > これはクラスター管理コマンドです。
  > したがって Swarm 上のマネージャーノードにおいて実行する必要があります。
  > マネージャーノードやワーカーノードについては、[Swarm モード](https://docs.docker.com/engine/swarm/) を参照してください。
usage: docker stack services [OPTIONS] STACK
pname: docker stack
plink: docker_stack.yaml
options:
- option: filter
  shorthand: f
  value_type: filter
  description: 指定された条件に基づいてフィルター検索を行います。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: format
  value_type: string
  description: Go 言語テンプレートを使って出力をフォーマットします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: namespace
  value_type: string
  description: Kubernetes 名前空間を指定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: true
  swarm: false
- option: quiet
  shorthand: q
  value_type: bool
  default_value: "false"
  description: ID のみを表示します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
inherited_options:
- option: kubeconfig
  value_type: string
  description: Kubernetes 設定ファイルを指定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: true
  swarm: false
- option: orchestrator
  value_type: string
  description: オーケストレーターを指定します。（swarm|kubernetes|all）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  以下のコマンドは `myapp` Stack におけるサービスを一覧表示します。

  ```bash
  $ docker stack services myapp

  ID            NAME            REPLICAS  IMAGE                                                                          COMMAND
  7be5ei6sqeye  myapp_web       1/1       nginx@sha256:23f809e7fd5952e7d5be065b4d3643fbbceccd349d537b62a123ef2201bc886f
  dn7m7nhhfb9y  myapp_db        1/1       mysql@sha256:a9a5b559f8821fe73d58c3606c812d1c044868d42c63817fa5125fd9d8b7b539
  ```

  {: #filtering }
  ### フィルター検索

  フィルターフラグ（`-f` または `--filter`）の指定書式は「キー=値」というものです。
  複数のフィルターが必要な場合は、フラグを複数指定します。
  （たとえば `--filter "foo=bar" --filter "bif=baz"` など）
  複数のフィルターフラグは `OR` フィルターとして結合されます。

  以下のコマンドは `web` と `db` という 2 つのサービスを表示します。

  ```bash
  $ docker stack services --filter name=myapp_web --filter name=myapp_db myapp

  ID            NAME            REPLICAS  IMAGE                                                                          COMMAND
  7be5ei6sqeye  myapp_web       1/1       nginx@sha256:23f809e7fd5952e7d5be065b4d3643fbbceccd349d537b62a123ef2201bc886f
  dn7m7nhhfb9y  myapp_db        1/1       mysql@sha256:a9a5b559f8821fe73d58c3606c812d1c044868d42c63817fa5125fd9d8b7b539
  ```

  現在サポートされているフィルターは以下のとおりです。

  * id / ID (`--filter id=7be5ei6sqeye` または `--filter ID=7be5ei6sqeye`)
    * Swarm: 対応済み。
    * Kubernetes: 未対応。
  * label (`--filter label=key=value`)
    * Swarm: 対応済み。
    * Kubernetes: 対応済み。
  * mode (`--filter mode=replicated` または `--filter mode=global`)
    * Swarm: 未対応。
    * Kubernetes: 対応済み。
  * name (`--filter name=myapp_web`)
    * Swarm: 対応済み。
    * Kubernetes: 対応済み。
  * node (`--filter node=mynode`)
    * Swarm: 未対応。
    * Kubernetes: 対応済み。
  * service (`--filter service=web`)
    * Swarm: 未対応。
    * Kubernetes: 対応済み。

  {: #formatting }
  ### フォーマット設定

  フォーマット設定オプション（`--format`）により Go 言語のテンプレートを利用して、サービスをわかりやすく出力することができます。

  Go 言語テンプレートによるプレースホルダー（placeholder）は以下のとおりです。

  プレースホルダー | 内容説明
  ------------|-------------------------------------------------------------------
  `.ID`       | サービス ID
  `.Name`     | サービス名
  `.Mode`     | サービスモード（replicated、global）
  `.Replicas` | サービスレプリカ
  `.Image`    | サービスイメージ

  `--format` オプションを利用すると `stack services` コマンドは、テンプレートが定めるデータを直接出力します。
  また `table` ディレクティブを利用すると、カラムヘッダーも同時に出力されます。

  以下は、ヘッダーを含めずにテンプレートを利用する例であり、すべてのサービスにおける `ID`、`Mode`、`Replicas` の各項目がコロン（`:`）で区切って表示されます。

  ```bash
  $ docker stack services --format "{{.ID}}: {{.Mode}} {{.Replicas}}"

  0zmvwuiu3vue: replicated 10/10
  fm6uf97exkul: global 5/5
  ```
deprecated: false
min_api_version: "1.25"
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

