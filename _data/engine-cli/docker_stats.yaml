command: docker stats
short: コンテナーのリソース利用統計について、動的なストリーム出力を行います。
long: |-
  `docker stats` コマンドは、実行中コンテナーに対する動的なストリームデータを返します。
  このデータを特定のコンテナーのみに限定する場合は、コンテナー名またはコンテナー ID を空白で区切って指定します。
  停止しているコンテナーを指定することもできますが、停止コンテナーからは何の情報も返されません。

  コンテナーのリソース利用状況に関する詳細については API エンドポイント `/containers/(id)/stats` を利用してください。

  > **メモ**
  >
  > Linux 上の Docker CLI が表示するメモリ使用量は、全メモリ使用量からページキャッシュ使用量を差し引いたものです。
  > API ではそういった計算は行いませんが、クライアントが必要に応じてデータ利用できるように、全メモリ使用量とページキャッシュ量は示します。

  > **メモ**
  >
  > `PIDS` の欄には、そのコンテナーによって生成されたプロセスやカーネルスレッドの数が示されます。
  > スレッドとは Linux カーネルにおける用語です。
  > これと同じ用語として「軽量プロセス」（lightweight process）、「カーネルタスク」（kernel task）などと表現されます。
  > `PIDS` 欄に非常に大きな数値が示されていたら、それはほんのわずかのプロセス数（`ps` や `top` によって表示されるもの）に加えて、コンテナーから生成される非常に多くのスレッドが含まれているものと考えられます。
usage: docker stats [オプション] [CONTAINER...]
pname: docker
plink: docker.yaml
options:
- option: all
  shorthand: a
  value_type: bool
  default_value: "false"
  description: コンテナーすべてを表示します。（デフォルトは実行中コンテナーのみ。）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: format
  value_type: string
  description: Go 言語テンプレートを使って出力をフォーマットします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: no-stream
  value_type: bool
  default_value: "false"
  description: 統計情報の自動表示を無効にし、取得された最初の値のみを表示します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: no-trunc
  value_type: bool
  default_value: "false"
  description: 詳細出力を行います。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  以下では Linux デーモンに向けて、実行中のコンテナーすべてに対する `docker stats` を実行します。

  ```bash
  $ docker stats

  CONTAINER ID        NAME                                    CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
  b95a83497c91        awesome_brattain                        0.28%               5.629MiB / 1.952GiB   0.28%               916B / 0B           147kB / 0B          9
  67b2525d8ad1        foobar                                  0.00%               1.727MiB / 1.952GiB   0.09%               2.48kB / 0B         4.11MB / 0B         2
  e5c383697914        test-1951.1.kay7x1lh1twk9c0oig50sd5tr   0.00%               196KiB / 1.952GiB     0.01%               71.2kB / 0B         770kB / 0B          1
  4bda148efbc0        random.1.vnc8on831idyr42slu578u3cr      0.00%               1.672MiB / 1.952GiB   0.08%               110kB / 0B          578kB / 0B          2
  ```

  [`--format` を利用して書式を変更する](#formatting) ということを行っていないなら、各列は以下のように表示されます。

  | カラム名                  | 内容説明                                                                                      |
  |---------------------------|-----------------------------------------------------------------------------------------------|
  | `CONTAINER ID` と `Name`  | コンテナー名とコンテナー ID                                                                   |
  | `CPU %` と `MEM %`        | コンテナーが利用するホスト上の CPU およびメモリの使用割合。                                   |
  | `MEM USAGE / LIMIT`       | コンテナーが利用しているメモリ総量と、コンテナーが利用可能なメモリ総量。                      |
  | `NET I/O`                 | ネットワークインターフェースを通じて、コンテナーが送受信したデータ総量。                      |
  | `BLOCK I/O`               | ホスト上のブロックデバイスから、コンテナーが読み書きしたデータ総量。                          |
  | `PIDs`                    | コンテナーが生成したプロセス数またはスレッド数。                                              |

  Linux デーモンに向けて、コンテナー名とコンテナー ID を複数指定して `docker stats` を実行します。

  ```bash
  $ docker stats awesome_brattain 67b2525d8ad1

  CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
  b95a83497c91        awesome_brattain    0.28%               5.629MiB / 1.952GiB   0.28%               916B / 0B           147kB / 0B          9
  67b2525d8ad1        foobar              0.00%               1.727MiB / 1.952GiB   0.09%               2.48kB / 0B         4.11MB / 0B         2
  ```

  出力をカスタマイズして、（実行中と停止を含む）すべてのコンテナーに対して `docker stats` を実行します。

  ```bash
  $ docker stats --all --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" fervent_panini 5acfcb1b4fd1 drunk_visvesvaraya big_heisenberg

  CONTAINER                CPU %               MEM USAGE / LIMIT
  fervent_panini           0.00%               56KiB / 15.57GiB
  5acfcb1b4fd1             0.07%               32.86MiB / 15.57GiB
  drunk_visvesvaraya       0.00%               0B / 0B
  big_heisenberg           0.00%               0B / 0B
  ```

  `drunk_visvesvaraya` and `big_heisenberg` are stopped containers in the above example.

  Windows デーモンに向けて、実行中のコンテナーすべてに対する `docker stats` を実行します。

  ```powershell
  PS E:\> docker stats
  CONTAINER ID        CPU %               PRIV WORKING SET    NET I/O             BLOCK I/O
  09d3bb5b1604        6.61%               38.21 MiB           17.1 kB / 7.73 kB   10.7 MB / 3.57 MB
  9db7aa4d986d        9.19%               38.26 MiB           15.2 kB / 7.65 kB   10.6 MB / 3.3 MB
  3f214c61ad1d        0.00%               28.64 MiB           64 kB / 6.84 kB     4.42 MB / 6.93 MB
  ```

  Windows デーモンに向けて、コンテナー名とコンテナー ID を複数指定して `docker stats` を実行します。

  ```powershell
  PS E:\> docker ps -a
  CONTAINER ID        NAME                IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
  3f214c61ad1d        awesome_brattain    nanoserver          "cmd"               2 minutes ago       Up 2 minutes                            big_minsky
  9db7aa4d986d        mad_wilson          windowsservercore   "cmd"               2 minutes ago       Up 2 minutes                            mad_wilson
  09d3bb5b1604        fervent_panini      windowsservercore   "cmd"               2 minutes ago       Up 2 minutes                            affectionate_easley

  PS E:\> docker stats 3f214c61ad1d mad_wilson
  CONTAINER ID        NAME                CPU %               PRIV WORKING SET    NET I/O             BLOCK I/O
  3f214c61ad1d        awesome_brattain    0.00%               46.25 MiB           76.3 kB / 7.92 kB   10.3 MB / 14.7 MB
  9db7aa4d986d        mad_wilson          9.59%               40.09 MiB           27.6 kB / 8.81 kB   17 MB / 20.1 MB
  ```

  {: #formatting }
  ### フォーマット設定

  フォーマット設定オプション（`--format`）により Go 言語のテンプレートを利用して、コンテナーをわかりやすく出力することができます。

  Go 言語テンプレートによるプレースホルダー（placeholder）は以下のとおりです。

  プレースホルダー | 内容説明
  ------------ | --------------------------------------------
  `.Container` | Container name or ID (user input)
  `.Name`      | コンテナー名
  `.ID`        | コンテナー ID
  `.CPUPerc`   | CPU 使用割合
  `.MemUsage`  | メモリ使用量
  `.NetIO`     | ネットワーク I/O
  `.BlockIO`   | ブロック I/O
  `.MemPerc`   | メモリ使用割合（Windows では利用不可）
  `.PIDs`      | PID 数（Windows では利用不可）


  `--format` オプションを利用すると `stats` コマンドは、テンプレートが定めるデータを直接出力します。
  また `table` ディレクティブを利用すると、カラムヘッダーも同時に出力されます。

  以下は、ヘッダーを含めずにテンプレートを利用する例であり、すべてのイメージにおける `Container`、`CPUPerc` の各項目がコロン（`:`）で区切って表示されます。

  ```bash
  $ docker stats --format "{{.Container}}: {{.CPUPerc}}"

  09d3bb5b1604: 6.61%
  9db7aa4d986d: 9.19%
  3f214c61ad1d: 0.00%
  ```

  コンテナーの統計情報一覧を、その名前、CPU 使用率、メモリ使用量とともに表形式で出力するには、以下のようにします。

  ```bash
  $ docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"

  CONTAINER           CPU %               PRIV WORKING SET
  1285939c1fd3        0.07%               796 KiB / 64 MiB
  9c76f7834ae2        0.07%               2.746 MiB / 64 MiB
  d1ea048f04e4        0.03%               4.583 MiB / 64 MiB
  ```

  The default format is as follows:

  On Linux:

      "table {{.ID}}\t{{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}\t{{.PIDs}}"

  On Windows:

      "table {{.ID}}\t{{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

