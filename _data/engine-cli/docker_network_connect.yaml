command: docker network connect
short: コンテナーをネットワークに接続します。
long: |-
  コンテナーをネットワークに接続します。
  コンテナーの接続は、コンテナー名またはコンテナー ID を使って行います。
  接続を行うと、同一ネットワーク内の他のコンテナーとの通信が可能になります。
usage: docker network connect [オプション] NETWORK CONTAINER
pname: docker network
plink: docker_network.yaml
options:
- option: alias
  value_type: stringSlice
  default_value: '[]'
  description: Add network-scoped alias for the container
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: driver-opt
  value_type: stringSlice
  default_value: '[]'
  description: driver options for the network
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ip
  value_type: string
  description: IPv4 アドレスを指定します。（たとえば 172.30.100.104 など）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ip6
  value_type: string
  description: IPv6 アドレスを指定します。（たとえば 2001:db8::33 など）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: link
  value_type: list
  description: 別のコンテナーへのリンクを追加します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: link-local-ip
  value_type: stringSlice
  default_value: '[]'
  description: Add a link-local address for the container
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  ### 実行中コンテナーのネットワークへの接続

  ```bash
  $ docker network connect multi-host-network container1
  ```

  ### コンテナー起動時のネットワークへの接続

  `docker run --network=<network-name>` のようにオプションをつけてコンテナーを起動すれば、起動直後にネットワークに接続することができます。

  ```bash
  $ docker run -itd --network=multi-host-network busybox
  ```

  ### ネットワーク内で利用する IP アドレスの指定

  コンテナーのインターフェースに割り振りたい IP アドレスを指定することができます。

  ```bash
  $ docker network connect --ip 10.10.36.122 multi-host-network container2
  ```

  ### かつての `--link` オプションの利用

  `--link` オプションを使って、エイリアスを指定して別のコンテナーをリンクすることができます。

  ```bash
  $ docker network connect --link container1:c1 multi-host-network container2
  ```

  ### コンテナーに対するネットワークエイリアスの生成

  `--alias` オプションは、コンテナーがネットワークに接続する際に、別名による接続を可能とするものです。

  ```bash
  $ docker network connect --alias db --alias mysql multi-host-network container2
  ```

  ### Network implications of stopping, pausing, or restarting containers

  ネットワークに接続しているコンテナーの一時停止、再起動、停止を行うことができます。
  コンテナーの起動時には、設定されているネットワークへの接続を行います。

  コンテナーに IP アドレスが指定されている場合、停止コンテナーが再起動する際には、IP アドレスが再割り当てされます。
  その IP アドレスが利用できない場合、コンテナーは起動に失敗します。
  IP アドレスの取得を確実にするために、ネットワーク生成時に `--ip-range` を指定する方法があります。
  そしてコンテナーの IP アドレスには、そこで指定した IP アドレスの範囲外にある固定 IP アドレスを選ぶようにします。
  こうすれば、コンテナーがネットワークに接続していない間に、その IP アドレスが他のコンテナーによって利用されることがなくなります。

  ```bash
  $ docker network create --subnet 172.20.0.0/16 --ip-range 172.20.240.0/20 multi-host-network
  ```

  ```bash
  $ docker network connect --ip 172.20.128.2 multi-host-network container2
  ```

  To verify the container is connected, use the `docker network inspect` command. Use `docker network disconnect` to remove a container from the network.

  Once connected in network, containers can communicate using only another
  container's IP address or name. For `overlay` networks or custom plugins that
  support multi-host connectivity, containers connected to the same multi-host
  network but launched from different Engines can also communicate in this way.

  You can connect a container to one or more networks. The networks need not be the same type. For example, you can connect a single container bridge and overlay networks.
deprecated: false
min_api_version: "1.21"
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

