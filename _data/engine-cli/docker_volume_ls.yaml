command: docker volume ls
aliases: list
short: ボリュームを一覧表示します。
long: |-
  Docker が管理するボリュームを一覧表示します。
  `-f` または `--filter` フラグを使ってフィルター検索を行うことができます。
  フィルター検索時のオプションの詳細は [フィルター検索](#filtering) の節を参照してください。
usage: docker volume ls [オプション]
pname: docker volume
plink: docker_volume.yaml
options:
- option: filter
  shorthand: f
  value_type: filter
  description: Provide filter values (e.g. 'dangling=true')
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: format
  value_type: string
  description: Go 言語テンプレートを使って出力をフォーマットします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: quiet
  shorthand: q
  value_type: bool
  default_value: "false"
  description: ボリューム名のみを表示します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  {: #create-a-volume }
  ### ボリュームの生成
  ```bash
  $ docker volume create rosemary

  rosemary

  $ docker volume create tyler

  tyler

  $ docker volume ls

  DRIVER              VOLUME NAME
  local               rosemary
  local               tyler
  ```

  {: #filtering }
  ### フィルター検索

  フィルターフラグ（`-f` または `--filter`）の指定書式は「キー=値」というものです。
  複数のフィルターが必要な場合は、フラグを複数指定します。
  （たとえば `--filter "foo=bar" --filter "bif=baz"` など。）

  現在サポートされているフィルターは以下のとおりです。

  - dangling (ブール値 - true または false、0 または 1)
  - driver (ボリュームドライバー名)
  - label (`label=<キー>` または `label=<キー>=<値>`)
  - name (ボリューム名)

  {: #dangling }
  #### dangling フィルター

  `dangling` フィルターは、どのコンテナーからも参照されていないボリュームを検索します。

  ```bash
  $ docker run -d  -v tyler:/tmpwork  busybox

  f86a7dd02898067079c99ceacd810149060a70528eff3754d0b0f1a93bd0af18
  $ docker volume ls -f dangling=true
  DRIVER              VOLUME NAME
  local               rosemary
  ```

  {: #driver }
  #### driver フィルター

  `driver` フィルターは、そのドライバーに基づいたボリュームを抽出します。

  以下の例では、`local` ドライバーを使って生成されたボリュームが抽出されます。

  ```bash
  $ docker volume ls -f driver=local

  DRIVER              VOLUME NAME
  local               rosemary
  local               tyler
  ```

  {: #label }
  #### label フィルター

  `label` フィルターは、`label` だけが存在する、あるいは `label` とその値が存在するボリュームを検索します。

  このことを示すために、まずボリュームを生成します。

  ```bash
  $ docker volume create the-doctor --label is-timelord=yes

  the-doctor
  $ docker volume create daleks --label is-timelord=no

  daleks
  ```

  以下の例では `is-timelord` ラベルを持ったボリュームを抽出します。
  この場合、その値の内容は問いません。

  ```bash
  $ docker volume ls --filter label=is-timelord

  DRIVER              VOLUME NAME
  local               daleks
  local               the-doctor
  ```

  上の結果からわかるように、`is-timelord=yes` と `is-timelord=no` というラベルを持ったボリュームが表示されます。

  ラベルの `key` と `value` の **双方を** フィルターに指定すれば、そのとおりの結果が返ります。

  ```bash
  $ docker volume ls --filter label=is-timelord=yes

  DRIVER              VOLUME NAME
  local               the-doctor
  ```

  ラベルのフィルターフラグを複数指定すると「AND」検索になります。
  つまりすべての条件が満たされた検索になります。

  ```bash
  $ docker volume ls --filter label=is-timelord=yes --filter label=is-timelord=no

  DRIVER              VOLUME NAME
  ```

  {: #name }
  #### name フィルター

  `name` フィルターは、ボリューム名の全部または一部を検索します。

  以下のフィルター指定では、`rose` という文字列を名前に含んだボリュームすべてが検索されます。

  ```bash
  $ docker volume ls -f name=rose

  DRIVER              VOLUME NAME
  local               rosemary
  ```

  {: #formatting }
  ### フォーマット設定

  フォーマット設定オプション（`--format`）により Go 言語のテンプレートを利用して、ボリュームをわかりやすく出力することができます。

  Go 言語テンプレートによるプレースホルダー（placeholder）は、以下のとおりです。

  プレースホルダー | 内容説明
  --------------|------------------------------------------------------------------------------------------
  `.Name`       | ボリューム名。
  `.Driver`     | ボリュームドライバー。
  `.Scope`      | ボリュームの範囲（local, global）
  `.Mountpoint` | ホスト上のボリュームのマウントポイント
  `.Labels`     | ボリュームに割り当てられている全ラベル。
  `.Label`      | そのボリュームに設定されている特定ラベルの値。たとえば `{{.Label "project.version"}}`

  `--format` オプションを利用すると `volume ls` コマンドは、テンプレートが定めるデータを直接出力します。
  また `table` ディレクティブを利用すると、カラムヘッダーも同時に出力されます。

  以下は、ヘッダーを含めずにテンプレートを利用する例であり、すべてのタスクにおける `Name`、`Driver` の各項目がコロン（`:`）で区切って表示されます。

  ```bash
  $ docker volume ls --format "{{.Name}}: {{.Driver}}"

  vol1: local
  vol2: local
  vol3: local
  ```
deprecated: false
min_api_version: "1.21"
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

