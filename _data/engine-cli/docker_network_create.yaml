command: docker network create
short: ネットワークを生成します。
long: |-
  新たなネットワークを生成します。
  `DRIVER` には、ビルトインネットワークドライバーである `bridge` か `overlay` を指定することができます。
  サードパーティ製のドライバーをインストールしているか、独自のカスタムネットワークドライバーを利用する場合は、この `DRIVER` に設定します。
  `--driver` オプションを指定しなかった場合、このコマンドが `bridge` ネットワークを自動的に生成します。
  Docker Engine をインストールすれば、`bridge` ネットワークは自動生成されています。
  このネットワークは `docker0` ブリッジに対応するものであり、Engine が従来より利用しているものです。
  `docker run` によって新たなコンテナーを起動すると、自動的にこのブリッジネットワークに接続されます。
  このデフォルトのブリッジネットワークは、削除することはできません。
  新たなネットワークは `network create` コマンドを使って生成することができます。

  ```bash
  $ docker network create -d bridge my-bridge-network
  ```

  ブリッジネットワークは、インストールされている 1 つの Engine 上において、分離されているネットワークです。
  複数の Engine 上において稼動している複数の Docker ホストにわたるようなネットワークを生成するのであれば、`overlay` ネットワークを生成する必要があります。
  `bridge` ネットワークの場合とは違って overlay ネットワークの場合、生成に必要となる前提条件があります。
  以下がその条件です。

  * キーバリューストアにアクセスできること。
    Engine では Consul、Etcd、ZooKeeper（分散ストア）といったキーバリューストアをサポートしています。
  * クラスターがキーバリューストアとやりとりできること。
  * クラスター内の各ホストにおいて Engine `daemon` が適切に設定されていること。

  `overlay` ネットワークをサポートする `dockerd` のオプションは以下のものです。

  * `--cluster-store`
  * `--cluster-store-opt`
  * `--cluster-advertise`

  このオプションの設定方法については ["**複数ホストによるネットワークをはじめよう**"](http://lfstranslation/docker/engine/userguide/networking/get-started-overlay) を参照してください。

  必須の作業ではありませんが、クラスターによるネットワーク管理を実現する Docker Swarm をインストールしてみるのも良いでしょう。
  Swarm は高度なサービスディスカバリー機能やサーバー管理ツールを提供するため、開発を手助けしてくれます。

  `overlay` ネットワークの前提条件を整えられたら、クラスター内の Docker ホスト上から、以下のコマンドを実行してネットワークを生成します。

  ```bash
  $ docker network create -d overlay my-multihost-network
  ```

  ネットワーク名はユニークでなければなりません。
  Docker デーモンは名前の衝突がないかどうかの検出を試みますが、この処理は保証されていません。
  ネットワーク名に衝突がないようにするのは、ユーザーの責任です。

  {: #overlay-network-limitations }
  ### overlay ネットワークの制約

  overlay ネットワークは `/24` ブロック（これがデフォルト）のネットワークとして生成する必要があります。
  デフォルトの VIP ベースのエンドポイントモードにおいてネットワークを生成する限り、利用可能な IP アドレスは 256 個までという制限が発生します。
  この推奨事項に関しては [limitations with swarm mode（Swarm モードにおける制約）](https://github.com/moby/moby/issues/30820) に述べられています。
  IP アドレスを 256 個より多く必要とする場合、ブロックサイズを増やすことはやめてください。
  その場合は、外部ロードバランサーにより `dnsrr` エンドポイントモードを利用するか、あるいは、より小さな overlay ネットワークを複数利用するようにします。
  さまざまなエンドポイントモードに関する詳細は [サービスディスカバリーの設定](http://lfstranslation/docker/engine/swarm/networking/#configure-service-discovery) を参照してください。
usage: docker network create [オプション] NETWORK
pname: docker network
plink: docker_network.yaml
options:
- option: attachable
  value_type: bool
  default_value: "false"
  description: 手動によるコンテナーのアタッチを有効にします。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: aux-address
  value_type: map
  default_value: map[]
  description: ネットワークドライバーが利用する IPv4 または IPv6 による補助アドレス。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: config-from
  value_type: string
  description: 設定のコピー元とするネットワーク。
  deprecated: false
  min_api_version: "1.30"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: config-only
  value_type: bool
  default_value: "false"
  description: ネットワークについてのみ設定を生成します。
  deprecated: false
  min_api_version: "1.30"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: driver
  shorthand: d
  value_type: string
  default_value: bridge
  description: ネットワークを管理するドライバー。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: gateway
  value_type: stringSlice
  default_value: '[]'
  description: マスターサブネット用の IPv4 または IPv6 ゲートウェイ。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ingress
  value_type: bool
  default_value: "false"
  description: Swarm のルーティングメッシュネットワークを生成します。
  deprecated: false
  min_api_version: "1.29"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: internal
  value_type: bool
  default_value: "false"
  description: ネットワークへの外部アクセスを制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ip-range
  value_type: stringSlice
  default_value: '[]'
  description: IP の部分的な範囲からコンテナー IP を割り当てます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ipam-driver
  value_type: string
  default_value: default
  description: IP アドレス管理ドライバー。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ipam-opt
  value_type: map
  default_value: map[]
  description: IPAM ドライバーの特定オプションを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ipv6
  value_type: bool
  default_value: "false"
  description: IPv6 ネットワークを有効にします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: label
  value_type: list
  description: ネットワークに対してメタデータを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: opt
  shorthand: o
  value_type: map
  default_value: map[]
  description: ドライバー固有のオプションを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: scope
  value_type: string
  description: ネットワークのスコープを制御します。
  deprecated: false
  min_api_version: "1.30"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: subnet
  value_type: stringSlice
  default_value: '[]'
  description: ネットワークセグメントを表わす CIDR 形式によるサブネット。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  {: #connect-containers }
  ### コンテナーの接続

  コンテナーを起動する際には `--network` フラグを使ってネットワークに接続します。
  以下の例は `busybox` コンテナーを `mynet` ネットワークに接続します。

  ```bash
  $ docker run -itd --network=mynet busybox
  ```

  コンテナー起動後に、そのコンテナーをネットワークに加える場合は、サブコマンド `docker network connect` を使います。

  ネットワークに接続されると、コンテナー間のやりとりは、コンテナーの IP アドレスまたはコンテナー名を使って行われます。
  `overlay` ネットワークやカスタムプラグインを使ったマルチホスト接続に対応している場合、コンテナーがマルチホスト対応ネットワークに接続し、かつ異なる Engine から起動されたものであっても、そのようなやりとりを通じてコンテナー間の通信が可能です。

  ネットワークからコンテナーを切断するには `docker network disconnect` コマンドを使います。

  {: #specify-advanced-options }
  ### 高度なオプションの設定

  ネットワーク生成時に Engine は、デフォルトではサブネットワークが重複しないようにします。
  このサブネットワークは、既存のネットワークを分割したものではありません。
  純粋に IP アドレスの利用のためにあります。
  このデフォルト設定はオーバーライドすることが可能であり、サブネットワークの値を直接 `--subnet` オプションに指定します。
  `bridge` ネットワークにおいては、単一のサブネットしか生成することはできません。

  ```bash
  $ docker network create --driver=bridge --subnet=192.168.0.0/16 br0
  ```

  また `--gateway`、`--ip-range`、`--aux-address` といったオプションを指定することもできます。

  ```bash
  $ docker network create \
    --driver=bridge \
    --subnet=172.28.0.0/16 \
    --ip-range=172.28.5.0/24 \
    --gateway=172.28.5.254 \
    br0
  ```

  `--gateway` フラグを省略すると、Engine は適切なアドレスプールからアドレスを選び出します。
  `overlay` ネットワークやネットワークドライバープラグインでは、複数のサブネットワークを生成することができます。
  以下の例では 2 つの `/25` サブネットマスクを利用して、単一の overlay ネットワーク内において IP アドレスが 256 個以上にならないように、現在のガイダンスに従っているものです。
  各サブネットワークでは 126 個のアドレスが利用可能です。

  ```bash
  $ docker network create -d overlay \
    --subnet=192.168.10.0/25 \
    --subnet=192.168.20.0/25 \
    --gateway=192.168.10.100 \
    --gateway=192.168.20.100 \
    --aux-address="my-router=192.168.10.5" --aux-address="my-switch=192.168.10.6" \
    --aux-address="my-printer=192.168.20.5" --aux-address="my-nas=192.168.20.6" \
    my-multihost-network
  ```

  サブネットワークは重複しないように注意してください。
  重複してしまうとネットワーク生成に失敗し、Engine がエラーを返します。

  {: #bridge-driver-options }
  ### ブリッジドライバーオプション

  カスタムネットワークを生成すると、デフォルトのネットワークドライバー（つまり `bridge`）には、指定可能なオプションが追加されます。
  以下に示すのがその追加オプションであり、docker0 ブリッジに対して用いられる同等の Docker デーモンフラグを合わせて示します。

  | オプション                                       | 同等の指定  | 内容説明                                              |
  |--------------------------------------------------|-------------|-------------------------------------------------------|
  | `com.docker.network.bridge.name`                 | -           | Linux ブリッジの生成時に利用されるブリッジ名。|
  | `com.docker.network.bridge.enable_ip_masquerade` | `--ip-masq` | IP マスカレードを有効にします。|
  | `com.docker.network.bridge.enable_icc`           | `--icc`     | コンテナー間の接続（Inter Container Connectivity）を有効あるいは無効にします。|
  | `com.docker.network.bridge.host_binding_ipv4`    | `--ip`      | コンテナーポートのバインディング時におけるデフォルトの IP。|
  | `com.docker.network.driver.mtu`                  | `--mtu`     | コンテナーにネットワーク MTU を設定します。|
  | `com.docker.network.container_interface_prefix`  | -           | コンテナーのインターフェースにカスタムプリフィックスを設定します。|

  以下に示すのは `docker network create` に指定できる引数であり、どのネットワークドライバーに対しても用いることができます。
  ここでは上と同じように `docker daemon` に対する同等の指定を示します。

  | 引数         | 同等の指定     | 内容説明                                   |
  |--------------|----------------|--------------------------------------------|
  | `--gateway`  | -              | マスターサブネットに対する IPv4 または IPv6 のゲートウェイ。|
  | `--ip-range` | `--fixed-cidr` | 指定範囲から IP を割り当てます。           |
  | `--internal` | -              | ネットワークへの外部アクセスを制限します。 |
  | `--ipv6`     | `--ipv6`       | IPv6 ネットワークを有効にします。          |
  | `--subnet`   | `--bip`        | ネットワークのサブネット。                 |

  たとえばポート公開のために割り当てる IP アドレスを指定するには `-o` または `--opt` オプションを使ってください。

  ```bash
  $ docker network create \
      -o "com.docker.network.bridge.host_binding_ipv4"="172.19.0.1" \
      simple-network
  ```

  {: #network-internal-mode }
  ### ネットワーク内部モード

  コンテナーを `overlay` ネットワークに接続する際に、デフォルトで Docker は外部接続を可能にするために bridge ネットワークにも接続します。
  外部とは切り離された `overlay` ネットワークを生成したい場合は、`--internal` オプションを指定します。

  {: #network-ingress-mode }
  ### ingress モード

  Swarm クラスター内においてルーティングメッシュを提供するためのネットワークを生成することができます。
  これを行うにはネットワーク生成時に `--ingress` を指定します。
  一度に生成できる ingress ネットワークはただ一つです。
  ネットワークは、どのサービスもそのネットワークに依存していない場合に限って削除することができます。
  overlay ネットワークの生成時に利用可能なオプションは、同じく ingress ネットワーク生成時にも利用可能です。
  ただし `--attachable` オプションは ingress ネットワークでは利用できません。

  ```bash
  $ docker network create -d overlay \
    --subnet=10.11.0.0/16 \
    --ingress \
    --opt com.docker.network.driver.mtu=9216 \
    --opt encrypted=true \
    my-ingress-network
  ```
deprecated: false
min_api_version: "1.21"
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

