command: docker run
short: 新たなコンテナー内でコマンドを実行します。
long: |-
  `docker run` コマンドは、指定されたイメージの上に書き込み可能コンテナーレイヤーを `create`（生成）します。
  そして指定されたコマンドを使ってコンテナーを `start`（起動）します。
  `docker run` は API で言うと、`/containers/create` の実行後に `/containers/(id)/start` を起動することと同じです。
  停止しているコンテナーの場合は、以前からの変更をすべて考慮して `docker start` によって起動されます。
  コンテナーの全一覧は `docker ps -a` により確認できます。

  The `docker run` command can be used in combination with `docker commit` to
  [*change the command that a container runs*](commit.md). There is additional detailed information about `docker run` in the [Docker run reference](../run.md).

  コンテナーからネットワークへの接続方法については ["**Docker ネットワーク概要**"](http://lfstranslation/docker/network/) を参照してください。
usage: docker run [オプション] IMAGE [COMMAND] [ARG...]
pname: docker
plink: docker.yaml
options:
- option: add-host
  value_type: list
  description: ホスト－IP マッピングのカスタム設定を追加します。(ホスト名:ip)
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: attach
  shorthand: a
  value_type: list
  description: STDIN、STDOUT、STDERR にアタッチします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: blkio-weight
  value_type: uint16
  default_value: "0"
  description: |
    ブロック I/O。（相対的な重みづけ）、10 から 1000、0 は無効化。（デフォルトは 0）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: blkio-weight-device
  value_type: list
  default_value: '[]'
  description: ブロック I/O 重みづけ。（相対的なデバイス重みづけ）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cap-add
  value_type: list
  description: Linux ケーパビリティーを追加します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cap-drop
  value_type: list
  description: Linux ケーパビリティーを削除します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cgroup-parent
  value_type: string
  description: 任意に指定するコンテナーの親 cgroup。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cidfile
  value_type: string
  description: コンテナー ID をファイルに書き出します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpu-count
  value_type: int64
  default_value: "0"
  description: CPU カウント。(Windows のみ)
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
  os_type: windows
- option: cpu-percent
  value_type: int64
  default_value: "0"
  description: CPU パーセント。(Windows のみ)
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
  os_type: windows
- option: cpu-period
  value_type: int64
  default_value: "0"
  description: CPU の CFS（Completely Fair Scheduler）間隔を制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpu-quota
  value_type: int64
  default_value: "0"
  description: CPU の CFS（Completely Fair Scheduler）クォータを制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpu-rt-period
  value_type: int64
  default_value: "0"
  description: CPU へのリアルタイムアクセス時間をマイクロ秒で制限します。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpu-rt-runtime
  value_type: int64
  default_value: "0"
  description: CPU へのリアルタイムアクセスランタイムをマイクロ秒で制限します。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpu-shares
  shorthand: c
  value_type: int64
  default_value: "0"
  description: CPU 配分。（相対的な重みづけ）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpus
  value_type: decimal
  description: CPU 数。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpuset-cpus
  value_type: string
  description: 利用を許容する CPU 数。（0-3、0,1）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpuset-mems
  value_type: string
  description: 利用を許容するメモリ数。（0-3、0,1）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: detach
  shorthand: d
  value_type: bool
  default_value: "false"
  description: コンテナーをバックグラウンド実行し、コンテナー ID を出力します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: detach-keys
  value_type: string
  description: コンテナーデタッチ時のキーシーケンスをオーバーライドします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: device
  value_type: list
  description: ホストのデバイスをコンテナーに追加します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: device-cgroup-rule
  value_type: list
  description: cgroup がアクセス可能なデバイスリストにルールを追加します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: device-read-bps
  value_type: list
  default_value: '[]'
  description: デバイスからの読み込み割合（秒あたりのバイト数）を制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: device-read-iops
  value_type: list
  default_value: '[]'
  description: デバイスからの読み込み割合（秒あたりの I/O）を制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: device-write-bps
  value_type: list
  default_value: '[]'
  description: デバイスへの書き込み割合（秒あたりのバイト数）を制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: device-write-iops
  value_type: list
  default_value: '[]'
  description: デバイスへの書き込み割合（秒あたりの I/O）を制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: disable-content-trust
  value_type: bool
  default_value: "true"
  description: イメージの検証を省略します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: dns
  value_type: list
  description: カスタム DNS サーバーを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: dns-opt
  value_type: list
  description: DNS オプションを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: dns-option
  value_type: list
  description: DNS オプションを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: dns-search
  value_type: list
  description: カスタム DNS 検索ドメインを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: domainname
  value_type: string
  description: コンテナーの NIS ドメイン名。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: entrypoint
  value_type: string
  description: イメージのデフォルト ENTRYPOINT をオーバーライドします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: env
  shorthand: e
  value_type: list
  description: 環境変数を設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: env-file
  value_type: list
  description: 環境変数ファイルを読み込みます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: expose
  value_type: list
  description: ポートまたはポート範囲を公開します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: gpus
  value_type: gpu-request
  description: コンテナーに追加する GPU デバイスを指定します。('all' により全 GPU)
  deprecated: false
  min_api_version: "1.40"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: group-add
  value_type: list
  description: 新たに参加するグループを追加します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: health-cmd
  value_type: string
  description: ヘルスチェックを実行するコマンド。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: health-interval
  value_type: duration
  default_value: 0s
  description: ヘルスチェックの実行間隔。(ms|s|m|h) （デフォルトは 0s）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: health-retries
  value_type: int
  default_value: "0"
  description: 不健康（unhealthy）であると報告するのに必要な連続失敗回数。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: health-start-period
  value_type: duration
  default_value: 0s
  description: |
    ヘルスチェックのリトライを数え始める前の、コンテナー初期化を行う開始時間。(ms|s|m|h) （デフォルトは 0s）
  deprecated: false
  min_api_version: "1.29"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: health-timeout
  value_type: duration
  default_value: 0s
  description: |
    1 つのチェック処理実行に許容する最大時間。(ms|s|m|h) （デフォルトは 0s）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: help
  value_type: bool
  default_value: "false"
  description: Print usage
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: hostname
  shorthand: h
  value_type: string
  description: Container host name
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: init
  value_type: bool
  default_value: "false"
  description: |
    コンテナー内部にて、シグナル送信と子プロセス管理を行う初期化処理を実行します。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: interactive
  shorthand: i
  value_type: bool
  default_value: "false"
  description: アタッチされていなくても STDIN は開放し続けます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: io-maxbandwidth
  value_type: bytes
  default_value: "0"
  description: |
    システムデバイスの I/O 帯域幅の上限。（Windows のみ）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
  os_type: windows
- option: io-maxiops
  value_type: uint64
  default_value: "0"
  description: システムデバイスの IOps の上限。（Windows のみ）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
  os_type: windows
- option: ip
  value_type: string
  description: IPv4 アドレス。（たとえば 172.30.100.104）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ip6
  value_type: string
  description: IPv6 アドレス。（たとえば 2001:db8::33）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ipc
  value_type: string
  description: 利用する IPC モード。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: isolation
  value_type: string
  description: コンテナーの分離技術（isolation technology）方式。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: kernel-memory
  value_type: bytes
  default_value: "0"
  description: カーネルメモリ上限。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: label
  shorthand: l
  value_type: list
  description: コンテナーに対してメタデータを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: label-file
  value_type: list
  description: 行ごとにラベルが記述されたファイルを読み込みます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: link
  value_type: list
  description: 別コンテナーへのリンクを追加します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: link-local-ip
  value_type: list
  description: コンテナーの IPv4/IPv6 によるリンクローカルアドレス。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: log-driver
  value_type: string
  description: コンテナーにおけるログドライバー。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: log-opt
  value_type: list
  description: ログドライバーオプション。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: mac-address
  value_type: string
  description: コンテナーの MAC アドレス。（たとえば 92:d0:c6:0a:29:33）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: memory
  shorthand: m
  value_type: bytes
  default_value: "0"
  description: メモリ上限。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: memory-reservation
  value_type: bytes
  default_value: "0"
  description: メモリのソフトリミット。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: memory-swap
  value_type: bytes
  default_value: "0"
  description: |
    メモリとスワップの総量を制限します。'-1' 設定時はスワップ無制限。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: memory-swappiness
  value_type: int64
  default_value: "-1"
  description: コンテナーのスワップ割合を調整します。（0 から 100）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: mount
  value_type: mount
  description: ファイルシステムマウントをコンテナーにアタッチします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: name
  value_type: string
  description: コンテナーに名前を割り当てます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: net
  value_type: network
  description: コンテナーをネットワークに接続します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: net-alias
  value_type: list
  description: ネットワーク範囲内のエイリアスをコンテナーに追加します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: network
  value_type: network
  description: コンテナーをネットワークに接続します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: network-alias
  value_type: list
  description: ネットワーク範囲内のエイリアスをコンテナーに追加します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: no-healthcheck
  value_type: bool
  default_value: "false"
  description: コンテナー固有の HEALTHCHECK を無効にします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: oom-kill-disable
  value_type: bool
  default_value: "false"
  description: OOM キラーを無効にします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: oom-score-adj
  value_type: int
  default_value: "0"
  description: ホストの OOM に対する優先順位を設定します。（-1000 から 1000）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: pid
  value_type: string
  description: 利用する PID 名前空間。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: pids-limit
  value_type: int64
  default_value: "0"
  description: コンテナーの PID 制限を調整します。（-1 により無制限）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: platform
  value_type: string
  description: サーバーがマルチプラットフォームに対応している場合に、プラットフォームを指定します。
  deprecated: false
  min_api_version: "1.32"
  experimental: true
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: privileged
  value_type: bool
  default_value: "false"
  description: コンテナーに拡張権限を付与します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: publish
  shorthand: p
  value_type: list
  description: ホストに対してコンテナーのポートを公開します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: publish-all
  shorthand: P
  value_type: bool
  default_value: "false"
  description: 公開されたポートをランダムポートとして公開します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: read-only
  value_type: bool
  default_value: "false"
  description: コンテナーのルートファイルシステムを読み込み専用としてマウントします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: restart
  value_type: string
  default_value: "no"
  description: コンテナー終了時に適用する再起動ポリシー。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: rm
  value_type: bool
  default_value: "false"
  description: 終了時に中間コンテナーを自動的に削除します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: runtime
  value_type: string
  description: このコンテナー向けに利用するランタイム。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: security-opt
  value_type: list
  description: セキュリティオプション。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: shm-size
  value_type: bytes
  default_value: "0"
  description: /dev/shm のサイズ。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: sig-proxy
  value_type: bool
  default_value: "true"
  description: 受信シグナルをすべてプロセスにプロキシーします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: stop-signal
  value_type: string
  default_value: SIGTERM
  description: コンテナーを停止するシグナル。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: stop-timeout
  value_type: int
  default_value: "0"
  description: コンテナー停止時の中断時間（秒単位）。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: storage-opt
  value_type: list
  description: コンテナーにおけるストレージドライバーのオプション。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: sysctl
  value_type: map
  default_value: map[]
  description: sysctl オプション。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: tmpfs
  value_type: list
  description: tmpfs ディレクトリのマウント。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: tty
  shorthand: t
  value_type: bool
  default_value: "false"
  description: 擬似 TTY を割り当てます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ulimit
  value_type: ulimit
  default_value: '[]'
  description: ulimit オプション。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: user
  shorthand: u
  value_type: string
  description: 'ユーザー名または UID。（記述書式t: \<name|uid\>[:\<group|gid\>]）'
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: userns
  value_type: string
  description: User namespace to use
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: uts
  value_type: string
  description: 利用する UTS 名前空間。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: volume
  shorthand: v
  value_type: list
  description: ボリュームをバインドマウントします。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: volume-driver
  value_type: string
  description: 任意に指定するボリュームドライバー。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: volumes-from
  value_type: list
  description: 指定されたコンテナーからボリュームをマウントいます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: workdir
  shorthand: w
  value_type: string
  description: コンテナー内部のワーキングディレクトリ。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  {: #assign-name-and-allocate-pseudo-tty---name--it }
  ### Assign name and allocate pseudo-TTY (--name, -it)

  ```bash
  $ docker run --name test -it debian

  root@d6c0fe130dba:/# exit 13
  $ echo $?
  13
  $ docker ps -a | grep test
  d6c0fe130dba        debian:7            "/bin/bash"         26 seconds ago      Exited (13) 17 seconds ago                         test
  ```

  This example runs a container named `test` using the `debian:latest`
  image. The `-it` instructs Docker to allocate a pseudo-TTY connected to
  the container's stdin; creating an interactive `bash` shell in the container.
  In the example, the `bash` shell is quit by entering
  `exit 13`. This exit code is passed on to the caller of
  `docker run`, and is recorded in the `test` container's metadata.

  ### Capture container ID (--cidfile)

  ```bash
  $ docker run --cidfile /tmp/docker_test.cid ubuntu echo "test"
  ```

  This will create a container and print `test` to the console. The `cidfile`
  flag makes Docker attempt to create a new file and write the container ID to it.
  If the file exists already, Docker will return an error. Docker will close this
  file when `docker run` exits.

  ### Full container capabilities (--privileged)

  ```bash
  $ docker run -t -i --rm ubuntu bash
  root@bc338942ef20:/# mount -t tmpfs none /mnt
  mount: permission denied
  ```

  This will *not* work, because by default, most potentially dangerous kernel
  capabilities are dropped; including `cap_sys_admin` (which is required to mount
  filesystems). However, the `--privileged` flag will allow it to run:

  ```bash
  $ docker run -t -i --privileged ubuntu bash
  root@50e3f57e16e6:/# mount -t tmpfs none /mnt
  root@50e3f57e16e6:/# df -h
  Filesystem      Size  Used Avail Use% Mounted on
  none            1.9G     0  1.9G   0% /mnt
  ```

  The `--privileged` flag gives *all* capabilities to the container, and it also
  lifts all the limitations enforced by the `device` cgroup controller. In other
  words, the container can then do almost everything that the host can do. This
  flag exists to allow special use-cases, like running Docker within Docker.

  {: #set-working-directory--w }
  ### ワーキングディレクトリの設定 (-w)

  ```bash
  $ docker  run -w /path/to/dir/ -i -t  ubuntu pwd
  ```

  `-w` は、コマンド実行を指定されたディレクトリ内において行います。
  上の例では `/path/to/dir/` です。
  そのパスが存在しなかった場合、コンテナー内部に生成されます。

  {: #set-storage-driver-options-per-container }
  ### コンテナーごとのストレージドライバーオプションの設定

  ```bash
  $ docker run -it --storage-opt size=120G fedora /bin/bash
  ```

  This (size) will allow to set the container rootfs size to 120G at creation time.
  This option is only available for the `devicemapper`, `btrfs`, `overlay2`,
  `windowsfilter` and `zfs` graph drivers.
  For the `devicemapper`, `btrfs`, `windowsfilter` and `zfs` graph drivers,
  user cannot pass a size less than the Default BaseFS Size.
  For the `overlay2` storage driver, the size option is only available if the
  backing fs is `xfs` and mounted with the `pquota` mount option.
  Under these conditions, user can pass any size less than the backing fs size.

  {: #mount-tmpfs---tmpfs }
  ### tmpfs のマウント (--tmpfs)

  ```bash
  $ docker run -d --tmpfs /run:rw,noexec,nosuid,size=65536k my_image
  ```

  The `--tmpfs` flag mounts an empty tmpfs into the container with the `rw`,
  `noexec`, `nosuid`, `size=65536k` options.

  ### Mount volume (-v, --read-only)

  ```bash
  $ docker  run  -v `pwd`:`pwd` -w `pwd` -i -t  ubuntu pwd
  ```

  The `-v` flag mounts the current working directory into the container. The `-w`
  lets the command being executed inside the current working directory, by
  changing into the directory to the value returned by `pwd`. So this
  combination executes the command using the container, but inside the
  current working directory.

  ```bash
  $ docker run -v /doesnt/exist:/foo -w /foo -i -t ubuntu bash
  ```

  When the host directory of a bind-mounted volume doesn't exist, Docker
  will automatically create this directory on the host for you. In the
  example above, Docker will create the `/doesnt/exist`
  folder before starting your container.

  ```bash
  $ docker run --read-only -v /icanwrite busybox touch /icanwrite/here
  ```

  Volumes can be used in combination with `--read-only` to control where
  a container writes files. The `--read-only` flag mounts the container's root
  filesystem as read only prohibiting writes to locations other than the
  specified volumes for the container.

  ```bash
  $ docker run -t -i -v /var/run/docker.sock:/var/run/docker.sock -v /path/to/static-docker-binary:/usr/bin/docker busybox sh
  ```

  By bind-mounting the docker unix socket and statically linked docker
  binary (refer to [get the linux binary](https://docs.docker.com/engine/install/binaries/#install-static-binaries)),
  you give the container the full access to create and manipulate the host's
  Docker daemon.

  On Windows, the paths must be specified using Windows-style semantics.

  ```powershell
  PS C:\> docker run -v c:\foo:c:\dest microsoft/nanoserver cmd /s /c type c:\dest\somefile.txt
  Contents of file

  PS C:\> docker run -v c:\foo:d: microsoft/nanoserver cmd /s /c type d:\somefile.txt
  Contents of file
  ```

  The following examples will fail when using Windows-based containers, as the
  destination of a volume or bind mount inside the container must be one of:
  a non-existing or empty directory; or a drive other than C:. Further, the source
  of a bind mount must be a local directory, not a file.

  ```powershell
  net use z: \\remotemachine\share
  docker run -v z:\foo:c:\dest ...
  docker run -v \\uncpath\to\directory:c:\dest ...
  docker run -v c:\foo\somefile.txt:c:\dest ...
  docker run -v c:\foo:c: ...
  docker run -v c:\foo:c:\existing-directory-with-contents ...
  ```

  For in-depth information about volumes, refer to [manage data in containers](https://docs.docker.com/storage/volumes/)


  ### Add bind mounts or volumes using the --mount flag

  The `--mount` flag allows you to mount volumes, host-directories and `tmpfs`
  mounts in a container.

  The `--mount` flag supports most options that are supported by the `-v` or the
  `--volume` flag, but uses a different syntax. For in-depth information on the
  `--mount` flag, and a comparison between `--volume` and `--mount`, refer to
  the [service create command reference](service_create.md#add-bind-mounts-volumes-or-memory-filesystems).

  Even though there is no plan to deprecate `--volume`, usage of `--mount` is recommended.

  Examples:

  ```bash
  $ docker run --read-only --mount type=volume,target=/icanwrite busybox touch /icanwrite/here
  ```

  ```bash
  $ docker run -t -i --mount type=bind,src=/data,dst=/data busybox sh
  ```

  ### Publish or expose port (-p, --expose)

  ```bash
  $ docker run -p 127.0.0.1:80:8080/tcp ubuntu bash
  ```

  This binds port `8080` of the container to TCP port `80` on `127.0.0.1` of the host
  machine. You can also specify `udp` and `sctp` ports.
  The [Docker User Guide](https://docs.docker.com/network/links/)
  explains in detail how to manipulate ports in Docker.

  Note that ports which are not bound to the host (i.e., `-p 80:80` instead of
  `-p 127.0.0.1:80:80`) will be accessible from the outside. This also applies if
  you configured UFW to block this specific port, as Docker manages his
  own iptables rules. [Read more](https://docs.docker.com/network/iptables/)

  ```bash
  $ docker run --expose 80 ubuntu bash
  ```

  This exposes port `80` of the container without publishing the port to the host
  system's interfaces.

  ### 環境変数の設定 (-e, --env, --env-file)

  ```bash
  $ docker run -e MYVAR1 --env MYVAR2=foo --env-file ./env.list ubuntu bash
  ```

  Use the `-e`, `--env`, and `--env-file` flags to set simple (non-array)
  environment variables in the container you're running, or overwrite variables
  that are defined in the Dockerfile of the image you're running.

  You can define the variable and its value when running the container:

  ```bash
  $ docker run --env VAR1=value1 --env VAR2=value2 ubuntu env | grep VAR
  VAR1=value1
  VAR2=value2
  ```

  You can also use variables that you've exported to your local environment:

  ```bash
  export VAR1=value1
  export VAR2=value2

  $ docker run --env VAR1 --env VAR2 ubuntu env | grep VAR
  VAR1=value1
  VAR2=value2
  ```

  このコマンドが実行されると、Docker CLI クライアントはローカル環境内でのその変数値を確認して、コンテナーに受け渡します。
  `=` が実行されず、ローカル環境内にてその変数がエクスポートされていなければ、その変数はコンテナー内で設定されません。

  環境変数はファイルからロードすることができます。
  このファイルでは `<変数>=値` という文法を用います（これは変数に設定値を代入します）。
  これに加えて `<variable>` という記述（これはローカル環境から値を取得します）と、コメントを表わす `#` を用いることができます。

  ```bash
  $ cat env.list
  # This is a comment
  VAR1=value1
  VAR2=value2
  USER

  $ docker run --env-file env.list ubuntu env | grep VAR
  VAR1=value1
  VAR2=value2
  USER=denis
  ```

  ### コンテナーのメタデータ設定 (-l, --label, --label-file)

  ラベルは `キー=値` というペアとして記述され、これを使ってメタデータをコンテナーに適用します。
  以下はコンテナーに対して 2 つのラベルを設定します。

  ```bash
  $ docker run -l my-label --label com.example.foo=bar ubuntu bash
  ```

  `my-label` キーには値が設定されていないため、このラベルはデフォルトとして空文字列 (`""`) が設定されます。
  ラベルを複数追加する場合は、ラベル設定のフラグ (`-l` or `--label`) を繰り返し指定します。

  `キー=値` の設定は、ラベル設定が重複しないように固有なものでなければなりません。
  キーが同一であって値が異なるラベル指定を複数行った場合、記述順の後にあるものが上書きされ設定されます。
  つまり最後に指定された `キー=値` を Docker は採用します。

  `--label-file` フラグを使うと、複数ラベルをファイルからロードすることができます。
  ファイル内において各ラベルの区切りは EOL 文字です。
  以下はカレントディレクトリにあるラベル設定のファイルを用いて、ラベルをロードする例です。

  ```bash
  $ docker run --label-file ./labels ubuntu bash
  ```

  ラベル設定のファイルの書式は、環境変数をロードするファイルと似ています。
  （ただし環境変数の場合と違って、ラベルはコンテナー内で稼動するプロセスから見えるものではありません。）
  以下は、ラベル設定ファイルの記述書式を示す例です。

  ```none
  com.example.label1="a label"

  # この行はコメントです。
  com.example.label2=another\ label
  com.example.label3
  ```

  ラベル設定のファイルを複数ロードする場合は、`--label-file` フラグを複数用いて指定します。

  For additional information on working with labels, see [*Labels - custom
  metadata in Docker*](https://docs.docker.com/config/labels-custom-metadata/) in
  the Docker User Guide.

  ### ネットワークへのコンテナーの接続 (--network)

  コンテナーを起動する際には、`--network` フラグを用いることでネットワークに接続することができます。
  以下の例では、`busybox` コンテナーを `my-net` ネットワークに接続します。

  ```bash
  $ docker run -itd --network=my-net busybox
  ```

  You can also choose the IP addresses for the container with `--ip` and `--ip6`
  flags when you start the container on a user-defined network.

  ```bash
  $ docker run -itd --network=my-net --ip=10.10.9.75 busybox
  ```

  If you want to add a running container to a network use the `docker network connect` subcommand.

  You can connect multiple containers to the same network. Once connected, the
  containers can communicate easily need only another container's IP address
  or name. For `overlay` networks or custom plugins that support multi-host
  connectivity, containers connected to the same multi-host network but launched
  from different Engines can also communicate in this way.

  > **Note**
  >
  > Service discovery is unavailable on the default bridge network. Containers can
  > communicate via their IP addresses by default. To communicate by name, they
  > must be linked.

  You can disconnect a container from a network using the `docker network
  disconnect` command.

  ### Mount volumes from container (--volumes-from)

  ```bash
  $ docker run --volumes-from 777f7dc92da7 --volumes-from ba8c0c54f0f2:ro -i -t ubuntu pwd
  ```

  The `--volumes-from` flag mounts all the defined volumes from the referenced
  containers. Containers can be specified by repetitions of the `--volumes-from`
  argument. The container ID may be optionally suffixed with `:ro` or `:rw` to
  mount the volumes in read-only or read-write mode, respectively. By default,
  the volumes are mounted in the same mode (read write or read only) as
  the reference container.

  Labeling systems like SELinux require that proper labels are placed on volume
  content mounted into a container. Without a label, the security system might
  prevent the processes running inside the container from using the content. By
  default, Docker does not change the labels set by the OS.

  To change the label in the container context, you can add either of two suffixes
  `:z` or `:Z` to the volume mount. These suffixes tell Docker to relabel file
  objects on the shared volumes. The `z` option tells Docker that two containers
  share the volume content. As a result, Docker labels the content with a shared
  content label. Shared volume labels allow all containers to read/write content.
  The `Z` option tells Docker to label the content with a private unshared label.
  Only the current container can use a private volume.

  ### Attach to STDIN/STDOUT/STDERR (-a)

  The `-a` flag tells `docker run` to bind to the container's `STDIN`, `STDOUT`
  or `STDERR`. This makes it possible to manipulate the output and input as
  needed.

  ```bash
  $ echo "test" | docker run -i -a stdin ubuntu cat -
  ```

  This pipes data into a container and prints the container's ID by attaching
  only to the container's `STDIN`.

  ```bash
  $ docker run -a stderr ubuntu echo test
  ```

  This isn't going to print anything unless there's an error because we've
  only attached to the `STDERR` of the container. The container's logs
  still store what's been written to `STDERR` and `STDOUT`.

  ```bash
  $ cat somefile | docker run -i -a stdin mybuilder dobuild
  ```

  This is how piping a file into a container could be done for a build.
  The container's ID will be printed after the build is done and the build
  logs could be retrieved using `docker logs`. This is
  useful if you need to pipe a file or something else into a container and
  retrieve the container's ID once the container has finished running.

  ### Add host device to container (--device)

  ```bash
  $ docker run --device=/dev/sdc:/dev/xvdc \
               --device=/dev/sdd --device=/dev/zero:/dev/nulo \
               -i -t \
               ubuntu ls -l /dev/{xvdc,sdd,nulo}

  brw-rw---- 1 root disk 8, 2 Feb  9 16:05 /dev/xvdc
  brw-rw---- 1 root disk 8, 3 Feb  9 16:05 /dev/sdd
  crw-rw-rw- 1 root root 1, 5 Feb  9 16:05 /dev/nulo
  ```

  It is often necessary to directly expose devices to a container. The `--device`
  option enables that. For example, a specific block storage device or loop
  device or audio device can be added to an otherwise unprivileged container
  (without the `--privileged` flag) and have the application directly access it.

  By default, the container will be able to `read`, `write` and `mknod` these devices.
  This can be overridden using a third `:rwm` set of options to each `--device`
  flag:

  ```bash
  $ docker run --device=/dev/sda:/dev/xvdc --rm -it ubuntu fdisk  /dev/xvdc

  Command (m for help): q
  $ docker run --device=/dev/sda:/dev/xvdc:r --rm -it ubuntu fdisk  /dev/xvdc
  You will not be able to write the partition table.

  Command (m for help): q

  $ docker run --device=/dev/sda:/dev/xvdc:rw --rm -it ubuntu fdisk  /dev/xvdc

  Command (m for help): q

  $ docker run --device=/dev/sda:/dev/xvdc:m --rm -it ubuntu fdisk  /dev/xvdc
  fdisk: unable to open /dev/xvdc: Operation not permitted
  ```

  > **Note**
  >
  > The `--device` option cannot be safely used with ephemeral devices. Block devices
  > that may be removed should not be added to untrusted containers with `--device`.

  For Windows, the format of the string passed to the `--device` option is in
  the form of `--device=<IdType>/<Id>`. Beginning with Windows Server 2019
  and Windows 10 October 2018 Update, Windows only supports an IdType of
  `class` and the Id as a [device interface class
  GUID](https://docs.microsoft.com/en-us/windows-hardware/drivers/install/overview-of-device-interface-classes).
  Refer to the table defined in the [Windows container
  docs](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/hardware-devices-in-containers)
  for a list of container-supported device interface class GUIDs.

  If this option is specified for a process-isolated Windows container, _all_
  devices that implement the requested device interface class GUID are made
  available in the container. For example, the command below makes all COM
  ports on the host visible in the container.

  ```powershell
  PS C:\> docker run --device=class/86E0D1E0-8089-11D0-9CE4-08003E301F73 mcr.microsoft.com/windows/servercore:ltsc2019
  ```

  > **Note**
  >
  > The `--device` option is only supported on process-isolated Windows containers.
  > This option fails if the container isolation is `hyperv` or when running Linux
  > Containers on Windows (LCOW).

  ### Access an NVIDIA GPU

  The `--gpus­` flag allows you to access NVIDIA GPU resources. First you need to
  install [nvidia-container-runtime](https://nvidia.github.io/nvidia-container-runtime/).
  Visit [Specify a container's resources](https://docs.docker.com/config/containers/resource_constraints/)
  for more information.

  To use `--gpus`, specify which GPUs (or all) to use. If no value is provied, all
  available GPUs are used. The example below exposes all available GPUs.

  ```bash
  $ docker run -it --rm --gpus all ubuntu nvidia-smi
  ```

  Use the `device` option to specify GPUs. The example below exposes a specific
  GPU.

  ```bash
  $ docker run -it --rm --gpus device=GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a ubuntu nvidia-smi
  ```

  The example below exposes the first and third GPUs.

  ```bash
  $ docker run -it --rm --gpus device=0,2 nvidia-smi
  ```

  ### Restart policies (--restart)

  Use Docker's `--restart` to specify a container's *restart policy*. A restart
  policy controls whether the Docker daemon restarts a container after exit.
  Docker supports the following restart policies:

  | Policy                     | Result                                                                                                                                                                                                                                                           |
  |:---------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | `no`                       | Do not automatically restart the container when it exits. This is the default.                                                                                                                                                                                   |
  | `on-failure[:max-retries]` | Restart only if the container exits with a non-zero exit status. Optionally, limit the number of restart retries the Docker daemon attempts.                                                                                                                     |
  | `unless-stopped`           | Restart the container unless it is explicitly stopped or Docker itself is stopped or restarted.                                                                                                                                                                  |
  | `always`                   | Always restart the container regardless of the exit status. When you specify always, the Docker daemon will try to restart the container indefinitely. The container will also always start on daemon startup, regardless of the current state of the container. |

  ```bash
  $ docker run --restart=always redis
  ```

  This will run the `redis` container with a restart policy of **always**
  so that if the container exits, Docker will restart it.

  More detailed information on restart policies can be found in the
  [Restart Policies (--restart)](../run.md#restart-policies---restart)
  section of the Docker run reference page.

  ### Add entries to container hosts file (--add-host)

  You can add other hosts into a container's `/etc/hosts` file by using one or
  more `--add-host` flags. This example adds a static address for a host named
  `docker`:

  ```bash
  $ docker run --add-host=docker:10.180.0.1 --rm -it debian

  root@f38c87f2a42d:/# ping docker
  PING docker (10.180.0.1): 48 data bytes
  56 bytes from 10.180.0.1: icmp_seq=0 ttl=254 time=7.600 ms
  56 bytes from 10.180.0.1: icmp_seq=1 ttl=254 time=30.705 ms
  ^C--- docker ping statistics ---
  2 packets transmitted, 2 packets received, 0% packet loss
  round-trip min/avg/max/stddev = 7.600/19.152/30.705/11.553 ms
  ```

  Sometimes you need to connect to the Docker host from within your
  container. To enable this, pass the Docker host's IP address to
  the container using the `--add-host` flag. To find the host's address,
  use the `ip addr show` command.

  The flags you pass to `ip addr show` depend on whether you are
  using IPv4 or IPv6 networking in your containers. Use the following
  flags for IPv4 address retrieval for a network device named `eth0`:

  ```bash
  $ HOSTIP=`ip -4 addr show scope global dev eth0 | grep inet | awk '{print $2}' | cut -d / -f 1 | sed -n 1p`
  $ docker run  --add-host=docker:${HOSTIP} --rm -it debian
  ```

  For IPv6 use the `-6` flag instead of the `-4` flag. For other network
  devices, replace `eth0` with the correct device name (for example `docker0`
  for the bridge device).

  ### Set ulimits in container (--ulimit)

  コンテナーにおいて `ulimit` 設定を行うには、デフォルトコンテナーでは利用できない追加の権限が必要となります。
  そこでこれを行うために `--ulimit` フラグを利用します。
  `--ulimit` では以下のように、ソフトリミット（soft limit）とハードリミット（hard limit）を `<type>=<soft limit>[:<hard limit>]` のようにして指定します。
  たとえば以下のとおりです。

  ```bash
  $ docker run --ulimit nofile=1024:1024 --rm debian sh -c "ulimit -n"
  1024
  ```

  > **メモ**
  >
  > `hard limit` を指定しなかった場合、`soft limit` が両方の値として採用されます。
  > `ulimits` の指定がなければ、デーモンにおいて設定されているデフォルトの `ulimits` が継承されます。
  > `as` オプションは利用できなくなっています。
  > つまり以下のようなスクリプトはサポートされません。
  >
  > ```bash
  > $ docker run -it --ulimit as=1024 fedora /bin/bash`
  > ```

  値を設定すると、その値が適切な `syscall` に送信されます。
  Docker はバイト列に関して何か変換を行うようなことはしません。
  このことを考慮して値を設定してください。

  #### For `nproc` usage

  Be careful setting `nproc` with the `ulimit` flag as `nproc` is designed by Linux to set the
  maximum number of processes available to a user, not to a container.  For example, start four
  containers with `daemon` user:

  ```bash
  $ docker run -d -u daemon --ulimit nproc=3 busybox top

  $ docker run -d -u daemon --ulimit nproc=3 busybox top

  $ docker run -d -u daemon --ulimit nproc=3 busybox top

  $ docker run -d -u daemon --ulimit nproc=3 busybox top
  ```

  The 4th container fails and reports "[8] System error: resource temporarily unavailable" error.
  This fails because the caller set `nproc=3` resulting in the first three containers using up
  the three processes quota set for the `daemon` user.

  ### Stop container with signal (--stop-signal)

  The `--stop-signal` flag sets the system call signal that will be sent to the container to exit.
  This signal can be a valid unsigned number that matches a position in the kernel's syscall table, for instance 9,
  or a signal name in the format SIGNAME, for instance SIGKILL.

  ### Optional security options (--security-opt)

  On Windows, this flag can be used to specify the `credentialspec` option.
  The `credentialspec` must be in the format `file://spec.txt` or `registry://keyname`.

  {: #stop-container-with-timeout---stop-timeout }
  ### Stop container with timeout (--stop-timeout)

  The `--stop-timeout` flag sets the timeout (in seconds) that a pre-defined (see `--stop-signal`) system call
  signal that will be sent to the container to exit. After timeout elapses the container will be killed with SIGKILL.

  {: #specify-isolation-technology-for-container---isolation }
  ### コンテナーへの分離技術方式の指定 (--isolation)

  このオプションは Docker コンテナーを Windows 上において稼動させる場合に役立ちます。
  `--isolation <value>` オプションは、コンテナーの分離技術方式を設定します。
  Linux の場合にサポートされているのは `default` オプションだけであり、これは Linux 名前空間を利用するものです。
  以下の 2 つのコマンドは Linux 上においてはまったく同じことです。

  ```bash
  $ docker run -d busybox top
  $ docker run -d --isolation default busybox top
  ```

  On Windows, `--isolation` can take one of these values:


  | Value     | Description                                                                                                       |
  |:----------|:------------------------------------------------------------------------------------------------------------------|
  | `default` | Use the value specified by the Docker daemon's `--exec-opt` or system default (see below).                        |
  | `process` | Shared-kernel namespace isolation (not supported on Windows client operating systems older than Windows 10 1809). |
  | `hyperv`  | Hyper-V hypervisor partition-based isolation.                                                                     |

  The default isolation on Windows server operating systems is `process`. The default
  isolation on Windows client operating systems is `hyperv`. An attempt to start a container on a client
  operating system older than Windows 10 1809 with `--isolation process` will fail.

  On Windows server, assuming the default configuration, these commands are equivalent
  and result in `process` isolation:

  ```powershell
  PS C:\> docker run -d microsoft/nanoserver powershell echo process
  PS C:\> docker run -d --isolation default microsoft/nanoserver powershell echo process
  PS C:\> docker run -d --isolation process microsoft/nanoserver powershell echo process
  ```

  If you have set the `--exec-opt isolation=hyperv` option on the Docker `daemon`, or
  are running against a Windows client-based daemon, these commands are equivalent and
  result in `hyperv` isolation:

  ```powershell
  PS C:\> docker run -d microsoft/nanoserver powershell echo hyperv
  PS C:\> docker run -d --isolation default microsoft/nanoserver powershell echo hyperv
  PS C:\> docker run -d --isolation hyperv microsoft/nanoserver powershell echo hyperv
  ```

  ### Specify hard limits on memory available to containers (-m, --memory)

  These parameters always set an upper limit on the memory available to the container. On Linux, this
  is set on the cgroup and applications in a container can query it at `/sys/fs/cgroup/memory/memory.limit_in_bytes`.

  On Windows, this will affect containers differently depending on what type of isolation is used.

  - With `process` isolation, Windows will report the full memory of the host system, not the limit to applications running inside the container

      ```powershell
      PS C:\> docker run -it -m 2GB --isolation=process microsoft/nanoserver powershell Get-ComputerInfo *memory*

      CsTotalPhysicalMemory      : 17064509440
      CsPhyicallyInstalledMemory : 16777216
      OsTotalVisibleMemorySize   : 16664560
      OsFreePhysicalMemory       : 14646720
      OsTotalVirtualMemorySize   : 19154928
      OsFreeVirtualMemory        : 17197440
      OsInUseVirtualMemory       : 1957488
      OsMaxProcessMemorySize     : 137438953344
      ```

  - With `hyperv` isolation, Windows will create a utility VM that is big enough to hold the memory limit, plus the minimal OS needed to host the container. That size is reported as "Total Physical Memory."

      ```powershell
      PS C:\> docker run -it -m 2GB --isolation=hyperv microsoft/nanoserver powershell Get-ComputerInfo *memory*

      CsTotalPhysicalMemory      : 2683355136
      CsPhyicallyInstalledMemory :
      OsTotalVisibleMemorySize   : 2620464
      OsFreePhysicalMemory       : 2306552
      OsTotalVirtualMemorySize   : 2620464
      OsFreeVirtualMemory        : 2356692
      OsInUseVirtualMemory       : 263772
      OsMaxProcessMemorySize     : 137438953344
      ```


  ### Configure namespaced kernel parameters (sysctls) at runtime

  The `--sysctl` sets namespaced kernel parameters (sysctls) in the
  container. For example, to turn on IP forwarding in the containers
  network namespace, run this command:

  ```bash
  $ docker run --sysctl net.ipv4.ip_forward=1 someimage
  ```

  > **Note**
  >
  > Not all sysctls are namespaced. Docker does not support changing sysctls
  > inside of a container that also modify the host system. As the kernel
  > evolves we expect to see more sysctls become namespaced.

  #### Currently supported sysctls

  IPC Namespace:

  - `kernel.msgmax`, `kernel.msgmnb`, `kernel.msgmni`, `kernel.sem`,
    `kernel.shmall`, `kernel.shmmax`, `kernel.shmmni`, `kernel.shm_rmid_forced`.
  - Sysctls beginning with `fs.mqueue.*`
  - If you use the `--ipc=host` option these sysctls are not allowed.

  Network Namespace:

  - Sysctls beginning with `net.*`
  - If you use the `--network=host` option using these sysctls are not allowed.
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

