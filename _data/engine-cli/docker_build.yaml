command: docker build
short: Dockerfile からイメージをビルドします。
long: |-
  `docker build` コマンドは Dockerfile と「ビルドコンテキスト」から Docker イメージをビルドします。
  ビルドコンテキストとは、指定された `PATH` や `URL` に存在している一連のファイルのことです。
  ビルド処理においては、コンテキスト内のどのファイルでも参照できます。
  たとえばビルドにおいて [**COPY**](../builder.md#copy) 命令を使っている場合に、コンテキスト内のファイルを参照することができます。

  `URL` パラメーターは 3 種類のリソースを参照します。
  Git リポジトリ、パッケージングされた tarball コンテキスト、プレーンなテキストファイル、の 3 つです。

  {: #git-repositories }
  ### Git リポジトリ

  `URL` パラメーターが Git リポジトリの場所を示している場合、そのリポジトリがビルドコンテキストとして扱われます。
  システムはリポジトリとサブモジュールを再帰的にフェッチします。
  コミット履歴は保持されません。
  リポジトリは初めに、ローカルホスト内の一時的なディレクトリにプルされます。
  これが正常処理されると、ディレクトリ内容がコンテキストとして Docker デーモンに送信されます。
  ローカルにコピーが存在しているなら、プライベートリポジトリにもアクセス可能になります。
  その際にはローカルにあるユーザー認証情報、VPN 情報などが用いられます。

  > **メモ**
  >
  > `URL` パラメーターが部分的なものであった場合、システムは `git clone --recursive` コマンドを実行して、そのリポジトリやサブモジュールを再帰的にクローンします。

  Git URL では、コンテキスト設定にあたって URL の部分指定が可能です。
  部分指定にはコロン（`:`）を使って区切ります。
  コロンより前の 1 つめの項目として Git がチェックアウトを行う URL を指定します。
  これはブランチ、タグ、リモートリファレンスのいずれでも可能です。
  2 つめの項目には、そのリポジトリ内のサブディレクトリを指定します。
  このサブディレクトリがビルドコンテキストとして用いられることになります。

  たとえば `container` ブランチ内の `docker` というディレクトリを利用するには、以下のように実行します。

  ```bash
  $ docker build https://github.com/docker/rootfs.git#container:docker
  ```

  以下に示す表は、ビルドコンテキストとして有効なサフィックス指定の例です。

  ビルド時のサフィックス指定例    | 利用されるコミット    | 利用されるビルドコンテキスト
  --------------------------------|-----------------------|-----------------------------
  `myrepo.git`                    | `refs/heads/master`   | `/`
  `myrepo.git#mytag`              | `refs/tags/mytag`     | `/`
  `myrepo.git#mybranch`           | `refs/heads/mybranch` | `/`
  `myrepo.git#pull/42/head`       | `refs/pull/42/head`   | `/`
  `myrepo.git#:myfolder`          | `refs/heads/master`   | `/myfolder`
  `myrepo.git#master:myfolder`    | `refs/heads/master`   | `/myfolder`
  `myrepo.git#mytag:myfolder`     | `refs/tags/mytag`     | `/myfolder`
  `myrepo.git#mybranch:myfolder`  | `refs/heads/mybranch` | `/myfolder`


  {: #tarball-contexts }
  ### Tarball コンテキスト

  URL にリモートの tarball を指定した場合、URL がそのままデーモンに送信されます。

  ```bash
  $ docker build http://server/context.tar.gz
  ```

  ダウンロード処理は、Docker デーモンが稼動しているホスト上で実行されます。
  このホストは、build コマンドが実行されたホストと同じである必要はありません。
  Docker デーモンは `context.tar.gz` を取得して、これをビルドコンテキストとして利用します。
  tarball コンテキストは UNIX `tar` フォーマット標準に適合した tar アーカイブである必要があります。
  これを 'xz'、'bzip2'、'gzip' により圧縮したフォーマットも受け付けます。
  'identity'（圧縮なし）のフォーマットも利用できます。

  {: #text-files }
  ### テキストファイル

  コンテキストを指定するのではなく、1 つの Dockerfile を指定することができます。
  つまりそのファイル内容を、`STDIN` を介してパイプ入力します。
  `Dockerfile` を `STDIN` からパイプ入力するには、以下のようにします。

  ```bash
  $ docker build - < Dockerfile
  ```

  Windows における Powershell 上では以下のようにします。

  ```powershell
  Get-Content Dockerfile | docker build -
  ```

  `STDIN` を利用するか、`URL` によりプレーンテキストファイルを指定した場合、`Dockerfile` というファイルにその内容を書き入れます。
  この場合 `-f` や `--file` オプションは無視されます。
  この状況では、コンテキストは存在しないものとなります。

  `docker build` コマンドが `Dockerfile` を探しにいく場所は、デフォルトではビルドコンテキストのルートディレクトリです。
  `-f` や `--file` オプションを使うと、別のファイルを利用するように指定できます。
  これは同一のファイル群を使って、ビルドを何度か行う場合に便利です。
  パスはビルドコンテキスト内のファイルを表わしていなければなりません。
  相対パスが指定された場合は、コンテキストのルートからの相対パスと解釈されます。

  ほとんどの場合、Dockerfile は空のディレクトリに置くのがベストです。
  Dockerfile のビルドに必要となるファイルのみを、後からそのディレクトリに追加します。
  ビルド性能を向上させるため、不要なファイルやディレクトリを指定する `.dockerignore` を、そのディレクトリに加えることもあります。
  そのファイルの生成に関しては [.dockerignore ファイル](../builder.md#dockerignore-file) を参照してください。

  Docker クライアントがデーモンとの接続を失った場合、ビルドはキャンセルされます。
  これはたとえば Docker クライアント上において `CTRL-c` により処理中断した場合や、Docker クライアントが何か別の理由により異常終了した場合に発生します。
  ビルドがキャンセルされる直前の動作中に、プル処理を初期化していた場合、そのプル処理も同じくキャンセルされます。
usage: docker build [オプション] PATH | URL | -
pname: docker
plink: docker.yaml
options:
- option: add-host
  value_type: list
  description: ホスト－IP マッピングのカスタム設定を追加します。(ホスト名:ip)
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: build-arg
  value_type: list
  description: ビルド時の変数を設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cache-from
  value_type: stringSlice
  default_value: '[]'
  description: キャッシュから取得すべきイメージ。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cgroup-parent
  value_type: string
  description: 任意に指定するコンテナーの親 cgroup。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: compress
  value_type: bool
  default_value: "false"
  description: ビルドコンテキストを gzip を使って圧縮します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpu-period
  value_type: int64
  default_value: "0"
  description: CPU の CFS（Completely Fair Scheduler）間隔を制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpu-quota
  value_type: int64
  default_value: "0"
  description: CPU の CFS（Completely Fair Scheduler）クォータを制限します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpu-shares
  shorthand: c
  value_type: int64
  default_value: "0"
  description: CPU 配分。（相対的な重みづけ）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpuset-cpus
  value_type: string
  description: 利用を許容する CPU 数。（0-3、0,1）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: cpuset-mems
  value_type: string
  description: 利用を許容するメモリ数。（0-3、0,1）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: disable-content-trust
  value_type: bool
  default_value: "true"
  description: イメージの検証を省略します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: file
  shorthand: f
  value_type: string
  description: Dockerfile 名。（デフォルトは 'PATH/Dockerfile'）
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: force-rm
  value_type: bool
  default_value: "false"
  description: 中間コンテナーを常に削除します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: iidfile
  value_type: string
  description: イメージ ID をファイルに出力します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: isolation
  value_type: string
  description: コンテナーの分離技術（isolation technology）方式。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: label
  value_type: list
  description: イメージに対してメタデータを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: memory
  shorthand: m
  value_type: bytes
  default_value: "0"
  description: メモリ上限。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: memory-swap
  value_type: bytes
  default_value: "0"
  description: |
    メモリとスワップの総量を制限します。'-1' 設定時はスワップ無制限。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: network
  value_type: string
  default_value: default
  description: |
    ビルド時の RUN 命令に対してネットワークモードを設定します。
  deprecated: false
  min_api_version: "1.25"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: no-cache
  value_type: bool
  default_value: "false"
  description: イメージビルド時にキャッシュを利用しません。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: output
  shorthand: o
  value_type: stringArray
  default_value: '[]'
  description: '出力先。（フォーマット: type=local,dest=path）'
  deprecated: false
  min_api_version: "1.40"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: platform
  value_type: string
  description: サーバーがマルチプラットフォームに対応している場合に、プラットフォームを指定します。
  deprecated: false
  min_api_version: "1.38"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: progress
  value_type: string
  default_value: auto
  description: |
    処理経過の出力タイプを設定します（auto、plain、tty）。コンテナー出力には plain が用いられます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: pull
  value_type: bool
  default_value: "false"
  description: 常に最新イメージのプルを試みます。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: quiet
  shorthand: q
  value_type: bool
  default_value: "false"
  description: ビルド出力を省略し、処理成功時にはイメージ ID を表示します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: rm
  value_type: bool
  default_value: "true"
  description: ビルド成功後に中間コンテナーを削除します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: secret
  value_type: stringArray
  default_value: '[]'
  description: |
    ビルド時に公開する Secret ファイル（BuildKit 有効時のみ)。 id=mysecret,src=/local/secret
  deprecated: false
  min_api_version: "1.39"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: security-opt
  value_type: stringSlice
  default_value: '[]'
  description: セキュリティオプション。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: shm-size
  value_type: bytes
  default_value: "0"
  description: /dev/shm のサイズ。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: squash
  value_type: bool
  default_value: "false"
  description: ビルドしたレイヤーを単一の新レイヤーに押し込みます（squash します）。
  deprecated: false
  min_api_version: "1.25"
  experimental: true
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ssh
  value_type: stringArray
  default_value: '[]'
  description: |
    ビルド時に公開する SSH エージェントソケットまたは SSH 鍵（BuildKit 有効時のみ）。（フォーマット: default|\<id\>[=\<socket\>|\<key\>[,\<key\>]]）
  deprecated: false
  min_api_version: "1.39"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: stream
  value_type: bool
  default_value: "false"
  description: ビルドコンテキストをやり取りするためにサーバーにアタッチするストリーム。
  deprecated: false
  min_api_version: "1.31"
  experimental: true
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: tag
  shorthand: t
  value_type: list
  description: 書式 'name:tag' により名前および任意のタグを指定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: target
  value_type: string
  description: ビルド対象とするビルドステージを指定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: ulimit
  value_type: ulimit
  default_value: '[]'
  description: ulimit オプション。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  {: #build-with-path }
  ### PATH を使ったビルド

  ```bash
  $ docker build .

  Uploading context 10240 bytes
  Step 1/3 : FROM busybox
  Pulling repository busybox
   ---> e9aa60c60128MB/2.284 MB (100%) endpoint: https://cdn-registry-1.docker.io/v1/
  Step 2/3 : RUN ls -lh /
   ---> Running in 9c9e81692ae9
  total 24
  drwxr-xr-x    2 root     root        4.0K Mar 12  2013 bin
  drwxr-xr-x    5 root     root        4.0K Oct 19 00:19 dev
  drwxr-xr-x    2 root     root        4.0K Oct 19 00:19 etc
  drwxr-xr-x    2 root     root        4.0K Nov 15 23:34 lib
  lrwxrwxrwx    1 root     root           3 Mar 12  2013 lib64 -> lib
  dr-xr-xr-x  116 root     root           0 Nov 15 23:34 proc
  lrwxrwxrwx    1 root     root           3 Mar 12  2013 sbin -> bin
  dr-xr-xr-x   13 root     root           0 Nov 15 23:34 sys
  drwxr-xr-x    2 root     root        4.0K Mar 12  2013 tmp
  drwxr-xr-x    2 root     root        4.0K Nov 15 23:34 usr
   ---> b35f4035db3f
  Step 3/3 : CMD echo Hello world
   ---> Running in 02071fceb21b
   ---> f52f38b7823e
  Successfully built f52f38b7823e
  Removing intermediate container 9c9e81692ae9
  Removing intermediate container 02071fceb21b
  ```

  上の例では `PATH` に `.` を指定しています。
  そこでローカルディレクトリ内のファイルが `tar` によってまとめられて Docker デーモンに送られます。
  `PAHT` は、Docker デーモン上でビルドが行われる際の「コンテキスト」として、対象とするファイルを探し出す場所を意味します。
  デーモンというものは、リモートマシン上でも起動可能であることを思い出してください。
  クライアント側（`docker build` を実行するマシン）において Dockerfile に何かが起こったとしても、それを検知することはできません。
  つまり `PATH` 上のファイルは **すべて** 送信されます。
  ただし Dockerfile 内の [**ADD**](../builder.md#add) が扱うファイルは別です。

  コンテキストがローカルマシンから Docker デーモンに送信される様子は、`docker` クライアントにおいて「Sending build context」（ビルドコンテキストを送信中）というメッセージからわかります。

  ビルド処理を終えたときに中間コンテナーを残しておきたい場合は `--rm=false` を用います。
  これを用いてもビルドキャッシュには影響しません。

  {: #build-with-url }
  ### URL を使ったビルド

  ```bash
  $ docker build github.com/creack/docker-firefox
  ```

  上では GitHub リポジトリをクローンして、クラウドリポジトリをコンテキストとします。
  リポジトリのルートにある Dockerfile が、処理における Dockerfile として用いられます。
  スキーム指定 `git://` や `git@` を使って、どのような Git リポジトリでも指定することができます。

  ```bash
  $ docker build -f ctx/Dockerfile http://server/ctx.tar.gz

  Downloading context: http://server/ctx.tar.gz [===================>]    240 B/240 B
  Step 1/3 : FROM busybox
   ---> 8c2e06607696
  Step 2/3 : ADD ctx/container.cfg /
   ---> e7829950cee3
  Removing intermediate container b35224abf821
  Step 3/3 : CMD /bin/ls
   ---> Running in fbc63d321d73
   ---> 3286931702ad
  Removing intermediate container fbc63d321d73
  Successfully built 377c409b35e4
  ```

  上では URL `http://server/ctx.tar.gz` を Docker デーモンに送っています。
  こうすると、指定された tarball をダウンロードし、伸張（解凍）が行われます。
  パラメーター `-f ctx/Dockerfile` は、イメージをビルドする際に利用する `Dockerfile` を `ctx.tar.gz` 内部のパスとして指定しています。
  その `Dockerfile` 内に `ADD` コマンドがあって、それがローカルパスを参照しているものであれば、それはすべて `ctx.tar.gz` 内ファイルのルートからの相対パスでなければなりません。
  上の例において tarball は `ctx/` というディレクトリを含むものとしています。
  したがって `ADD ctx/container.cfg /` という命令であれば、期待どおりに動作します。

  {: #build-with-- }
  ### - を使ったビルド

  ```bash
  $ docker build - < Dockerfile
  ```

  上の例ではコンテキストを利用せず、Dockerfile を `STDIN` から読み込みます。
  コンテキストがないわけですから、ローカルディレクトリ内から Docker デーモンに送信されるものは何もないということです。
  コンテキストがないため、Dockerfile 内の `ADD` は、リモート URL を参照しているものだけが正しく動作します。

  ```bash
  $ docker build - < context.tar.gz
  ```

  上の例は、圧縮されたコンテキストを `STDIN` から読み込んでイメージをビルドします。
  サポートされるフォーマットは bzip2、gzip、xz です。

  {: #use-a-dockerignore-file }
  ### .dockerignore ファイルの利用

  ```bash
  $ docker build .

  Uploading context 18.829 MB
  Uploading context
  Step 1/2 : FROM busybox
   ---> 769b9341d937
  Step 2/2 : CMD echo Hello world
   ---> Using cache
   ---> 99cc1ad10469
  Successfully built 99cc1ad10469
  $ echo ".git" > .dockerignore
  $ docker build .
  Uploading context  6.76 MB
  Uploading context
  Step 1/2 : FROM busybox
   ---> 769b9341d937
  Step 2/2 : CMD echo Hello world
   ---> Using cache
   ---> 99cc1ad10469
  Successfully built 99cc1ad10469
  ```

  This example shows the use of the `.dockerignore` file to exclude the `.git`
  directory from the context. Its effect can be seen in the changed size of the
  uploaded context. The builder reference contains detailed information on
  [creating a .dockerignore file](../builder.md#dockerignore-file).

  When using the [BuildKit backend](../builder.md#buildkit), `docker build` searches
  for a `.dockerignore` file relative to the Dockerfile name. For example, running
  `docker build -f myapp.Dockerfile .` will first look for an ignore file named
  `myapp.Dockerfile.dockerignore`. If such a file is not found, the `.dockerignore`
  file is used if present. Using a Dockerfile based `.dockerignore` is useful if a
  project contains multiple Dockerfiles that expect to ignore different sets of
  files.


  ### Tag an image (-t)

  ```bash
  $ docker build -t vieux/apache:2.0 .
  ```

  This will build like the previous example, but it will then tag the resulting
  image. The repository name will be `vieux/apache` and the tag will be `2.0`.
  [Read more about valid tags](tag.md).

  You can apply multiple tags to an image. For example, you can apply the `latest`
  tag to a newly built image and add another tag that references a specific
  version.
  For example, to tag an image both as `whenry/fedora-jboss:latest` and
  `whenry/fedora-jboss:v2.1`, use the following:

  ```bash
  $ docker build -t whenry/fedora-jboss:latest -t whenry/fedora-jboss:v2.1 .
  ```

  ### Specify a Dockerfile (-f)

  ```bash
  $ docker build -f Dockerfile.debug .
  ```

  This will use a file called `Dockerfile.debug` for the build instructions
  instead of `Dockerfile`.

  ```bash
  $ curl example.com/remote/Dockerfile | docker build -f - .
  ```

  The above command will use the current directory as the build context and read
  a Dockerfile from stdin.

  ```bash
  $ docker build -f dockerfiles/Dockerfile.debug -t myapp_debug .
  $ docker build -f dockerfiles/Dockerfile.prod  -t myapp_prod .
  ```

  The above commands will build the current build context (as specified by the
  `.`) twice, once using a debug version of a `Dockerfile` and once using a
  production version.

  ```bash
  $ cd /home/me/myapp/some/dir/really/deep
  $ docker build -f /home/me/myapp/dockerfiles/debug /home/me/myapp
  $ docker build -f ../../../../dockerfiles/debug /home/me/myapp
  ```

  These two `docker build` commands do the exact same thing. They both use the
  contents of the `debug` file instead of looking for a `Dockerfile` and will use
  `/home/me/myapp` as the root of the build context. Note that `debug` is in the
  directory structure of the build context, regardless of how you refer to it on
  the command line.

  > **Note:**
  > `docker build` will return a `no such file or directory` error if the
  > file or directory does not exist in the uploaded context. This may
  > happen if there is no context, or if you specify a file that is
  > elsewhere on the Host system. The context is limited to the current
  > directory (and its children) for security reasons, and to ensure
  > repeatable builds on remote Docker hosts. This is also the reason why
  > `ADD ../file` will not work.

  ### Use a custom parent cgroup (--cgroup-parent)

  When `docker build` is run with the `--cgroup-parent` option the containers
  used in the build will be run with the [corresponding `docker run`
  flag](../run.md#specify-custom-cgroups).

  {: #set-ulimits-in-container---ulimit }
  ### コンテナーの ulimit 設定 (--ulimit)

  Using the `--ulimit` option with `docker build` will cause each build step's
  container to be started using those [`--ulimit`
  flag values](run.md#set-ulimits-in-container---ulimit).

  {: #set-build-time-variables---build-arg }
  ### Set build-time variables (--build-arg)

  You can use `ENV` instructions in a Dockerfile to define variable
  values. These values persist in the built image. However, often
  persistence is not what you want. Users want to specify variables differently
  depending on which host they build an image on.

  A good example is `http_proxy` or source versions for pulling intermediate
  files. The `ARG` instruction lets Dockerfile authors define values that users
  can set at build-time using the  `--build-arg` flag:

  ```bash
  $ docker build --build-arg HTTP_PROXY=http://10.20.30.2:1234 --build-arg FTP_PROXY=http://40.50.60.5:4567 .
  ```

  This flag allows you to pass the build-time variables that are
  accessed like regular environment variables in the `RUN` instruction of the
  Dockerfile. Also, these values don't persist in the intermediate or final images
  like `ENV` values do.   You must add `--build-arg` for each build argument.

  Using this flag will not alter the output you see when the `ARG` lines from the
  Dockerfile are echoed during the build process.

  For detailed information on using `ARG` and `ENV` instructions, see the
  [Dockerfile reference](../builder.md).

  You may also use the `--build-arg` flag without a value, in which case the value
  from the local environment will be propagated into the Docker container being
  built:

  ```bash
  $ export HTTP_PROXY=http://10.20.30.2:1234
  $ docker build --build-arg HTTP_PROXY .
  ```

  This is similar to how `docker run -e` works. Refer to the [`docker run` documentation](https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file)
  for more information.

  {: #optional-security-options---security-opt }
  ### Optional security options (--security-opt)

  This flag is only supported on a daemon running on Windows, and only supports
  the `credentialspec` option. The `credentialspec` must be in the format
  `file://spec.txt` or `registry://keyname`.

  ### Specify isolation technology for container (--isolation)

  This option is useful in situations where you are running Docker containers on
  Windows. The `--isolation=<value>` option sets a container's isolation
  technology. On Linux, the only supported is the `default` option which uses
  Linux namespaces. On Microsoft Windows, you can specify these values:


  | Value     | Description                                                                                                                                                   |
  |-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | `default` | Use the value specified by the Docker daemon's `--exec-opt` . If the `daemon` does not specify an isolation technology, Microsoft Windows uses `process` as its default value.  |
  | `process` | Namespace isolation only.                                                                                                                                     |
  | `hyperv`  | Hyper-V hypervisor partition-based isolation.                                                                                                                 |

  Specifying the `--isolation` flag without a value is the same as setting `--isolation="default"`.

  ### Add entries to container hosts file (--add-host)

  You can add other hosts into a container's `/etc/hosts` file by using one or
  more `--add-host` flags. This example adds a static address for a host named
  `docker`:

      $ docker build --add-host=docker:10.180.0.1 .

  ### Specifying target build stage (--target)

  When building a Dockerfile with multiple build stages, `--target` can be used to
  specify an intermediate build stage by name as a final stage for the resulting
  image. Commands after the target stage will be skipped.

  ```dockerfile
  FROM debian AS build-env
  ...

  FROM alpine AS production-env
  ...
  ```

  ```bash
  $ docker build -t mybuildimage --target build-env .
  ```

  ### Custom build outputs

  By default, a local container image is created from the build result. The
  `--output` (or `-o`) flag allows you to override this behavior, and a specify a
  custom exporter. For example, custom exporters allow you to export the build
  artifacts as files on the local filesystem instead of a Docker image, which can
  be useful for generating local binaries, code generation etc.

  The value for `--output` is a CSV-formatted string defining the exporter type
  and options. Currently, `local` and `tar` exporters are supported. The `local`
  exporter writes the resulting build files to a directory on the client side. The
  `tar` exporter is similar but writes the files as a single tarball (`.tar`).

  If no type is specified, the value defaults to the output directory of the local
  exporter. Use a hyphen (`-`) to write the output tarball to standard output
  (`STDOUT`).

  The following example builds an image using the current directory (`.`) as build
  context, and exports the files to a directory named `out` in the current directory.
  If the directory does not exist, Docker creates the directory automatically:

  ```bash
  $ docker build -o out .
  ```

  The example above uses the short-hand syntax, omitting the `type` options, and
  thus uses the default (`local`) exporter. The example below shows the equivalent
  using the long-hand CSV syntax, specifying both `type` and `dest` (destination
  path):

  ```bash
  $ docker build --output type=local,dest=out .
  ```

  Use the `tar` type to export the files as a `.tar` archive:

  ```bash
  $ docker build --output type=tar,dest=out.tar .
  ```

  The example below shows the equivalent when using the short-hand syntax. In this
  case, `-` is specified as destination, which automatically selects the `tar` type,
  and writes the output tarball to standard output, which is then redirected to
  the `out.tar` file:

  ```bash
  docker build -o - . > out.tar
  ```

  The `--output` option exports all files from the target stage. A common pattern
  for exporting only specific files is to do multi-stage builds and to copy the
  desired files to a new scratch stage with [`COPY --from`](../builder.md#copy).

  The example `Dockerfile` below uses a separate stage to collect the
  build-artifacts for exporting:

  ```dockerfile
  FROM golang AS build-stage
  RUN go get -u github.com/LK4D4/vndr

  FROM scratch AS export-stage
  COPY --from=build-stage /go/bin/vndr /
  ```

  When building the Dockerfile with the `-o` option, only the files from the final
  stage are exported to the `out` directory, in this case, the `vndr` binary:

  ```bash
  $ docker build -o out .

  [+] Building 2.3s (7/7) FINISHED
   => [internal] load build definition from Dockerfile                                                                          0.1s
   => => transferring dockerfile: 176B                                                                                          0.0s
   => [internal] load .dockerignore                                                                                             0.0s
   => => transferring context: 2B                                                                                               0.0s
   => [internal] load metadata for docker.io/library/golang:latest                                                              1.6s
   => [build-stage 1/2] FROM docker.io/library/golang@sha256:2df96417dca0561bf1027742dcc5b446a18957cd28eba6aa79269f23f1846d3f   0.0s
   => => resolve docker.io/library/golang@sha256:2df96417dca0561bf1027742dcc5b446a18957cd28eba6aa79269f23f1846d3f               0.0s
   => CACHED [build-stage 2/2] RUN go get -u github.com/LK4D4/vndr                                                              0.0s
   => [export-stage 1/1] COPY --from=build-stage /go/bin/vndr /                                                                 0.2s
   => exporting to client                                                                                                       0.4s
   => => copying files 10.30MB                                                                                                  0.3s

  $ ls ./out
  vndr
  ```

  > **Note**
  >
  > This feature requires the BuildKit backend. You can either
  > [enable BuildKit](../builder.md#buildkit) or use the [buildx](https://github.com/docker/buildx)
  > plugin which provides more output type options.

  ### Specifying external cache sources

  In addition to local build cache, the builder can reuse the cache generated from
  previous builds with the `--cache-from` flag pointing to an image in the registry.

  To use an image as a cache source, cache metadata needs to be written into the
  image on creation. This can be done by setting `--build-arg BUILDKIT_INLINE_CACHE=1`
  when building the image. After that, the built image can be used as a cache source
  for subsequent builds.

  Upon importing the cache, the builder will only pull the JSON metadata from the
  registry and determine possible cache hits based on that information. If there
  is a cache hit, the matched layers are pulled into the local environment.

  In addition to images, the cache can also be pulled from special cache manifests
  generated by [`buildx`](https://github.com/docker/buildx) or the BuildKit CLI
  (`buildctl`). These manifests (when built with the `type=registry` and `mode=max`
  options) allow pulling layer data for intermediate stages in multi-stage builds.

  The following example builds an image with inline-cache metadata and pushes it
  to a registry, then uses the image as a cache source on another machine:

  ```bash
  $ docker build -t myname/myapp --build-arg BUILDKIT_INLINE_CACHE=1 .
  $ docker push myname/myapp
  ```

  After pushing the image, the image is used as cache source on another machine.
  BuildKit automatically pulls the image from the registry if needed.

  ```bash
  # on another machine
  $ docker build --cache-from myname/myapp .
  ```

  > **Note**
  >
  > This feature requires the BuildKit backend. You can either
  > [enable BuildKit](../builder.md#buildkit) or use the [buildx](https://github.com/docker/buildx)
  > plugin. The previous builder has limited support for reusing cache from
  > pre-pulled images.

  {: #squash-an-images-layers---squash-experimental }
  ### Squash an image's layers (--squash) （試験的機能）

  {: #overview }
  #### 概要

  Once the image is built, squash the new layers into a new image with a single
  new layer. Squashing does not destroy any existing image, rather it creates a new
  image with the content of the squashed layers. This effectively makes it look
  like all `Dockerfile` commands were created with a single layer. The build
  cache is preserved with this method.

  `--squash` オプションは試験的機能であるため、安定したものとしては捉えないでください。


  Squashing layers can be beneficial if your Dockerfile produces multiple layers
  modifying the same files, for example, files that are created in one step, and
  removed in another step. For other use-cases, squashing images may actually have
  a negative impact on performance; when pulling an image consisting of multiple
  layers, layers can be pulled in parallel, and allows sharing layers between
  images (saving space).

  For most use cases, multi-stage builds are a better alternative, as they give more
  fine-grained control over your build, and can take advantage of future
  optimizations in the builder. Refer to the [use multi-stage builds](https://docs.docker.com/develop/develop-images/multistage-build/)
  section in the userguide for more information.


  {: #known-limitations }
  #### 既知の制約

  `--squash` オプションでは多くの制約があります。

  - When squashing layers, the resulting image cannot take advantage of layer
    sharing with other images, and may use significantly more space. Sharing the
    base image is still supported.
  - When using this option you may see significantly more space used due to
    storing two copies of the image, one for the build cache with all the cache
    layers in tact, and one for the squashed version.
  - While squashing layers may produce smaller images, it may have a negative
    impact on performance, as a single layer takes longer to extract, and
    downloading a single layer cannot be parallelized.
  - When attempting to squash an image that does not make changes to the
    filesystem (for example, the Dockerfile only contains `ENV` instructions),
    the squash step will fail (see [issue #33823](https://github.com/moby/moby/issues/33823)).

  {: #prerequisites }
  #### 前提条件

  The example on this page is using experimental mode in Docker 1.13.

  Experimental mode can be enabled by using the `--experimental` flag when starting the Docker daemon or setting `experimental: true` in the `daemon.json` configuration file.

  By default, experimental mode is disabled. To see the current configuration, use the `docker version` command.

  ```none
  Server:
   Version:      1.13.1
   API version:  1.26 (minimum version 1.12)
   Go version:   go1.7.5
   Git commit:   092cba3
   Built:        Wed Feb  8 06:35:24 2017
   OS/Arch:      linux/amd64
   Experimental: false

   [...]
  ```

  To enable experimental mode, users need to restart the docker daemon with the experimental flag enabled.

  #### Enable Docker experimental

  Experimental features are now included in the standard Docker binaries as of version 1.13.0. For enabling experimental features, you need to start the Docker daemon with `--experimental` flag. You can also enable the daemon flag via /etc/docker/daemon.json. e.g.

  ```json
  {
      "experimental": true
  }
  ```

  Then make sure the experimental flag is enabled:

  ```bash
  $ docker version -f '{{.Server.Experimental}}'
  true
  ```

  #### Build an image with `--squash` argument

  The following is an example of docker build with `--squash` argument

  ```dockerfile
  FROM busybox
  RUN echo hello > /hello
  RUN echo world >> /hello
  RUN touch remove_me /remove_me
  ENV HELLO world
  RUN rm /remove_me
  ```

  An image named `test` is built with `--squash` argument.

  ```bash
  $ docker build --squash -t test .

  [...]
  ```

  If everything is right, the history will look like this:

  ```bash
  $ docker history test

  IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
  4e10cb5b4cac        3 seconds ago                                                       12 B                merge sha256:88a7b0112a41826885df0e7072698006ee8f621c6ab99fca7fe9151d7b599702 to sha256:47bcc53f74dc94b1920f0b34f6036096526296767650f223433fe65c35f149eb
  <missing>           5 minutes ago       /bin/sh -c rm /remove_me                        0 B
  <missing>           5 minutes ago       /bin/sh -c #(nop) ENV HELLO=world               0 B
  <missing>           5 minutes ago       /bin/sh -c touch remove_me /remove_me           0 B
  <missing>           5 minutes ago       /bin/sh -c echo world >> /hello                 0 B
  <missing>           6 minutes ago       /bin/sh -c echo hello > /hello                  0 B
  <missing>           7 weeks ago         /bin/sh -c #(nop) CMD ["sh"]                    0 B
  <missing>           7 weeks ago         /bin/sh -c #(nop) ADD file:47ca6e777c36a4cfff   1.113 MB
  ```

  We could find that all layer's name is `<missing>`, and there is a new layer with COMMENT `merge`.

  Test the image, check for `/remove_me` being gone, make sure `hello\nworld` is in `/hello`, make sure the `HELLO` envvar's value is `world`.
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

